{"componentChunkName":"component---src-page-templates-book-page-book-page-provider-tsx","path":"/book/chapters/Klassovye_komponenty","result":{"pageContext":{"localization":{"lang":"ru","title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи.","appNavigation":[{"id":"index","path":"/","name":"Главная"},{"id":"book-contents","path":"/book/chapters","name":"Оглавление"},{"id":"what-is-new-contents","path":"/what-is-new","name":"Что нового?"},{"id":"pdf","path":"/pdf","name":"PDF Версия"}],"notification":{"behaviorNotification":{"copyLink":"Ссылка скопирована!"}},"layouts":{"shared":{"informers":{"donateInformer":{"minBanner":{"label":"Хочешь поддержать проект финансово?","buttons":{"yes":"Да, хочу! Узнать подробнее...","no":"Нет. Закрыть окно."}},"maxBanner":{"html":{"__html":"Чтобы <b>контент</b> приносил <b>максимальную пользу</b> его <b>необходимо</b> постоянно <b>совершенствовать</b> и <b>адаптировать</b>\n        под каждую новую версию <i>TypeScript</i>. Это отнимает <b>много времени</b> и без Вашей, даже <b>незначительно\n        финансовой</b>, поддержки практически <b>невозможно</b>. Помогая проекту вы прежде всего принимаете <b>участие</b> в\n        <b>развитии</b> профессионального уровня ваших <b>друзей</b>, <b>коллег</b>, <b>подчиненных</b>. Выпусти желание\n        сделать свой мир лучше. <b>Сделай контент для будущих специалистов ещё качественней и доступней!</b>"},"href":"#"}},"watchWithTelegramInformer":{"text":["Хочешь поддерживать свои знания в актуальном состоянии?","Тогда подписывайся на Telegram канал и узнавай обо всех изменениях!"],"subscribeButton":{"label":"Подписаться"}},"contentLevelUpInformer":{"text":"Кажется непонятным и слишком сложным? Чего-то не хватает? Расскажи об этом! Помоги сделать контент более доступным для следующих поколений!","buttons":[{"label":"Сообщить на Github","href":""}]}},"links":{"telegram":"#"},"appContent":{"contentNav":{"prevButton":{"label":"Назад"},"nextButton":{"label":"Вперед"}}},"appHeader":{"navToggleButton":{"tooltips":{"open":["Открыть боковое","меню"],"close":["Закрыть боковое","меню"]}},"appMenu":{"pdfButton":{"href":"#","tooltip":["Скачать","PDF версию"],"label":"Скачать PDF версию"},"telegramButton":{"href":"https://t.me/nauchikus","tooltip":["Следить за","изменениями в","Telegram"],"label":"Следить за изменениями в Telegram"},"githubButton":{"href":"https://github.com/nauchikus/typescript-definitive-guide","tooltip":["Посетить проект на","Github"],"label":"Посетить проект на Github"}},"donateDropdown":{"href":"https://yasobe.ru/na/typescript_definitive_guide","toggleButton":{"label":["Поддержать","финансово"]},"content":{"title":"Сделай контент для будущих поколений ещё качественней и доступней!","subtitle":{"__html":"Контент требует постоянного совершенствования и адаптации под каждую новую версию\nязыка TypeScript.\nЭто отнимает много времени и без Вашей, даже незначительно финансовой, поддержки практически\nневозможно.\nПрими участие в развитии профессионального уровня своих друзей, коллег, подчиненных. Встань на\nсторону небезразличных!"}}},"appSearch":{"inputPlaceholder":"Я ищу...","submitButton":{"ariaLabel":"Отправить"}}},"pdf":{"downloadPdfBookButton":{"title":"Скачать PDF Версию","href":"pdf/TypeScript Подробное Руководство.pdf"}}}},"pages":{"index":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"appDescription":"Книга и документация в одном","subtitleAll":["TypeScript в деталях","TypeScript крупным планом","TypeScript под микроскопом","TypeScript со всех сторон"]}},"book__chapters":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"tocItem":{"copyLinkToBufferButton":{"tooltip":"Скопировать ссылку в буфер обмена"},"collapseTocButton":{"tooltip":{"openState":"Открыть","closeState":"Закрыть"}}},"secondaryContentBar":{"label":"Оглавление","tocFilterButton":{"tooltip":"Отфильтровать на основе разделов"},"tocCollapseAllButton":{"tooltip":{"openState":"Раскрыть все","closeState":"Закрыть все"}}},"asideLayout":{"tagBarLabel":"Тематические разделы","tagBar":{"cleanFilterButton":"Все разделы"}}}},"book__chapter":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"secondaryContentBar":{"editOnGithubButton":{"tooltip":"Редактировать на Github"}}}},"what-is-new__toc":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"primaryContentBar":{"label":"История нововведений"},"tocItem":{"copyLinkToBufferButton":{"tooltip":"Скопировать ссылку в буфер обмена"}}}},"not-found":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"notFound_404":{"status":"404","title":"Страница не найдена :("}}},"pdf":{"metadata":{"title":"TypeScript - в деталях","description":"Бесплатная pdf книга на русском по языку TypeScript."},"gui":{"title":"TypeScript Подробное Руководство","subtitle":"PDF Версия"}}}},"pageContentData":{"title":"Классовые компоненты","section":"React","path":"klassovye komponenty","subtitles":[{"subtitle":"Производные от Component<P, S, SS>","path":"klassovye komponenty#proizvodnye ot component<p, s, ss>"},{"subtitle":"Производные от PureComponent<Props, State, Snapshot>","path":"klassovye komponenty#proizvodnye ot purecomponent<props, state, snapshot>"}],"html":"<section class=\"content__section\" id=\"\"><h1 class=\"content__heading_1 main-title\">\n    <button class=\"content__button_copy-to-buffer\" path=\"\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Классовые компоненты</span></h1><p class=\"content__paragraph\">Помимо компонентов на основе функций, <em>React</em> позволяет определять компоненты на основе классов, которые, как в случае реализации <em>ловушки для ошибок</em> просто не заменимы. Кроме этого, с ними необходимо познакомиться, так как они являются частью <em>React</em>. Именно поэтому текущая глава полностью посвящена старым добрым классовым компонентам. </p></section>\n<section class=\"content__section\" id=\"Proizvodnye_ot_Component<P,S,SS>\"><h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"Proizvodnye_ot_Component<P,S,SS>\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Производные от Component&#x3C;P, S, SS></span></h2><p class=\"content__paragraph\">Пользовательские компоненты построенные на основе классов обязаны расширять базовый обобщенный класс <code>Component&#x3C;Props, State, Snapshot></code> имеющего три необязательных параметра типа.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Timer<span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Первым делом стоит обратить внимание на первую строку, а именно импорт пространства имен <em>React</em>. Не зависимо используете вы его напрямую или нет, оно обязательно должно быть импортировано, в противном случаи компилятор напомнит об этом с помощью ошибки.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * [0] Забыт импорт пространства\n * имен React в следствии чего в\n * точке [1] возникнет ошибка - \n * \n * 'React' refers to a UMD global,\n * but the current file is a module.\n * Consider adding an import instead.ts(2686)\n */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0]</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Timer<span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Кроме того, в нашем примере у метода <code>render</code> отсутствует аннотация возвращаемого типа, что на практике даже приветствуется. Но с образовательной точки зрения её указание не принесет никакого вреда.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> ReactNode<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReactNode <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Timer<span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">При переопределении производным классом метода <code>render</code> в качестве типа возвращаемого значения необходимо указывать тип совместимый с указанным в базовом классе, то есть с типом <code>ReactNode</code> поведение и нюансы которого были подробно рассмотрены в главе посвященной функциональным компонентам.</p><p class=\"content__paragraph\">Как говорилось ранее, тип от которого должны наследоваться пользовательские классовые компоненты является обобщенным и имеет три необязательных параметра типа, что и иллюстрирует наш минималистический пример.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * [0] отсутствует передача аргументов типа\n * определенных как Component&lt;Props, State, Snapshot>\n *, что указывает на их необязательность.\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token comment\">/** [0] */</span> <span class=\"token punctuation\">{</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">В реальных проектах подобное встречается редко, поэтому следующим шагом разберем логику определения типов описывающих пользовательский компонент. </p><p class=\"content__paragraph\">Начнем по порядку, а именно с <code>Props</code>. Несмотря на то, что <em>пропсы</em> делятся на обязательные и необязательные, все они по мере необходимости передаются в качестве аргументов конструктора при создании его экземпляра и доступны по ссылке <code>this.props</code> (обозначим их как <em>общие пропсы</em>). Тем не менее за инициализацию необязательных пропсов ответственен сам классовый компонент для чего и предусмотренно статическое поле <code>defaultProps</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * Аннотации в ожидании указания\n * типа.\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> defaultProps <span class=\"token comment\">/** [0] */</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>props <span class=\"token comment\">/** [1] */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Тот факт, что аннотация <code>defaultProps</code> предполагает тип представляющий лишь ассоциированное с этим полем значение вынуждает разделить декларацию общих пропсов на два типа <code>DefaultProps</code> и <code>Props</code>. Ввиду того, что тип <code>Props</code> представляет не только обязательные пропсы, но и необязательные, он должен расширять (<code>extends</code>) тип <code>DefaultProps</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">DefaultProps</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DefaultProps</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Не будет лишним упомянуть, что в реальных проектах интерфейс <code>Props</code>, помимо <code>DefaultProps</code>, очень часто расширяет множество других интерфейсов. В их число входят типы, предоставляемые библиотеками <em>ui</em>, <em>hoc обертками</em> и обычными библиотеками, как например <em>react-router</em> и его тип <code>RouteComponentProps&#x3C;T></code>.</p><p class=\"content__paragraph\">Поскольку в описании базового класса поле (<code>this.props</code>) принадлежит к типу определенного в качестве первого параметра типа, то есть <code>Component&#x3C;Props></code>, то <code>Props</code> необходимо указать в аннотации не только первого параметра конструктора, но и в качестве первого аргумента базового типа. Иначе <code>this.props</code> так и останется принадлежать к простому объектному типу <code>{}</code> заданному по умолчанию.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">DefaultProps</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DefaultProps</span> <span class=\"token punctuation\">{</span>\n    duration<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Если не передавать Props в качестве\n * аргумента типа в точке [0], то в точке\n * [1] возникнет ошибка ->\n * Property 'message' does not exist on type\n * 'Readonly&lt;{}> &amp; Readonly&lt;{ children?: ReactNode; }>'\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props <span class=\"token comment\">/**[0] */</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Done!</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        props<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok [1]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Как было сказано в теме посвященной функциональным компонентам, что если взять за правило именовать типы пропсов как <code>DefaultProps</code> и <code>Props</code>, то при необходимости в их импорте непременно возникнет коллизия из-за одинаковых имен. Поэтому принято добавлять к названиям названия самих компонентов <code>*DefaultProps</code> и <code>*Props</code>. Но поскольку эти типы повсеместно указываются в аннотациях расположенных в теле классового компонента, то подобные имена попросту усложняют понимание кода. Поэтому для исчерпывающих имен необходимо создавать более компактные псевдонимы типа <code>type</code>.</p><p class=\"content__paragraph\">Также стоит сразу сказать, что все три типа выступающих в качестве аргументов базового типа нуждаются в более компактных идентификаторах определяемых с помощью псевдонимов. Но, кроме того, все они описывают объекты, мутация которых не предполагается. Простыми словами типы <code>Props</code>, <code>State</code> и <code>Snapshot</code> используются исключительно в аннотациях <code>readonly</code> полей класса, параметрах его методов и возвращаемых ими значениях. Поскольку секрет здорового приложения кроется в типобезопасности, всю упомянутую троицу необходимо сделать неизменяемой. Для этого существует специальный тип <code>Readonly&#x3C;T></code>. Но так как преобразование типов в каждой отдельной аннотации приведет к чрезмерному увеличению кода, необходимо проделать это единожды в определении их псевдонимов.</p><p class=\"content__paragraph\">Посмотрим как новая информация преобразит наш основной пример.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> ReactNode<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Имена интерфейсов получили префикс\n * в виде названия компонента.\n */</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimerDefaultProps</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimerProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TimerDefaultProps</span> <span class=\"token punctuation\">{</span>\n    duration<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Для конкретных типов преобразованных\n * в типы только для чтения\n * определен псевдоним.\n */</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">DefaultProps</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>TimerDefaultProps<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>TimerProps<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> defaultProps<span class=\"token operator\">:</span> DefaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Done!</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Добавлен экспорт не только самого\n * компонента, но и типа представляющего\n * его основные пропсы.\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Timer<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>TimerProps<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// экспортируем типа *Props</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Также стоит упомянуть, что пропсы всех компонентов по умолчанию имеют определение необязательного (объявленного с модификатором <code>?:</code>) поля <code>children</code> принадлежащего к оговоренному ранее типу <code>ReactNode</code>. Простыми словами можно вообще не передавать аргументы базовому типу и компилятор не выдаст ошибку при обращении к полю <code>this.props.children</code>;</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Label</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                    <span class=\"token comment\">/**[0] */</span>\n            <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] несмотря на то, что базовому\n * типу не были установлены аргумента типа\n * обращение к свойству children не вызывает\n * ошибки поскольку данное свойство определенно\n * в базовом типе.\n */</span>\n\n<span class=\"token operator\">&lt;</span>Label<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token string\">\"label\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Label<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string as children -> Ok [1]</span>\n<span class=\"token operator\">&lt;</span>Label<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token number\">1000</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Label<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number as children -> Ok [2]</span>\n<span class=\"token operator\">&lt;</span>Label<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Label<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined as children -> Ok [3]</span>\n\n <span class=\"token comment\">/**\n  * При создании экземпляров компонента Label\n  * допустимо указывать в качестве children\n  * как строку [1], так и числа [2] и кроме\n  * того не указывать значения вовсе [3]\n  */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">В остальном <code>children</code> имеют, то же поведение и недостатки подробно описанные в главе посвященной функциональным компонентам. Поэтому оставим их и приступим к рассмотрению второго параметра базового типа <code>Component</code>, а именно к типу представляющего состояние компонента <code>Component&#x3C;Props, State></code>.</p><p class=\"content__paragraph\">Несмотря на то, что состояние является закрытым от внешнего мира, тип представляющий его также принято называть с префиксом в роли которого выступает название самого компонента. Причина кроется не только в соблюдении общего стиля кода относительно именования типов пропсов. На практике могут возникнуть коллизии имен при создании вложенных классовых компонентов, что является обычным делом при создании <em>hoc</em>. Поэтому для типа описывающего состояние компонента так же необходимо определить ещё и псевдоним и не забыть передать его в качестве второго аргумента базового типа и указать в аннотации поля <code>state</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> ReactNode<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimerDefaultProps</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimerProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TimerDefaultProps</span> <span class=\"token punctuation\">{</span>\n    duration<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// определение State</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimerState</span> <span class=\"token punctuation\">{</span>\n    time<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">DefaultProps</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>TimerDefaultProps<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>TimerProps<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">State</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>TimerState<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// создание псевдонима для типа </span>\n\n<span class=\"token comment\">/**\n * [0] передача псевдонима State\n * в качестве второго аргумента\n * базового типа.\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> State <span class=\"token comment\">/** [0] */</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> defaultProps<span class=\"token operator\">:</span> DefaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">DOne!</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// определение поля state</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> state<span class=\"token operator\">:</span> State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        time<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Timer<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>TimerProps<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Пора обратить внимание на момент связанный с объявлением <code>defaultProps</code> и <code>state</code>, которым необходимо указывать (или не указывать вовсе) модификатор доступа <code>public</code>, так как к ним должен быть доступ извне. Кроме того, не будет лишним добавить этим полям модификатор <code>readonly</code>, который поможет избежать случайных изменений.</p><p class=\"content__paragraph\">Говоря о состоянии нельзя обойти стороной такой метод как <code>setState</code> необходимый для его изменения, о котором известно, что в качестве аргумента он может принимать как непосредственно объект представляющий новое состояние, так и функцию возвращающую его. Но поскольку первый случай ничего, что нас могло бы заинтересовать, из себя не представляет, рассмотрен будет лишь второй вариант с функцией. Поэтому продолжим наш основной пример и внесем в него изменения касающиеся изменения состояния. Создадим скрытый метод <code>reset</code> который будет сбрасывать значение пройденного времени.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimerState</span> <span class=\"token punctuation\">{</span>\n    time<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">State</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>TimerState<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> State<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> defaultProps<span class=\"token operator\">:</span> DefaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">DOne!</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> state<span class=\"token operator\">:</span> State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        time<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// определение скрытого метода reset</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**\n         * Вызываем метод setState с функцией\n         * асинхронного изменения состояния\n         * в качестве первого аргумента.\n         */</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>prevState<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> props<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>time<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// возвращаем новое состояние</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Из того кода, что был добавлен в наш пример стоит обратить внимание на несколько моментов. Прежде всего это использование псевдонимов <code>Props</code> и <code>State</code> в аннотациях параметров функции переданной в метод <code>setState</code>. Обозначим её как <code>updater</code>. Как было сказано ранее, типы описывающие состояние и пропсы используются повсеместно в коде компонента. Кроме того, стоит сказать, что описание сигнатуры функции <code>updater</code> подобным образом излишне и имеет место быт лишь в образовательных целях. Достаточно просто определить необходимые параметры и вывод типов самостоятельно определит их принадлежность.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> State<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">private</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**\n         * Вывод типов в состоянии определить\n         * принадлежность параметров, поэтому\n         * самостоятельное аннотирование излишне.\n         * \n         * (parameter) prevState: Readonly&lt;TimerState>\n         * (parameter) props: Readonly&lt;TimerProps>\n         */</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>time<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">В добавок к этому стоит возложить определение возвращаемого значения из функции <code>updater</code> на вывод типов, поскольку это не просто излишне, но и в большинстве случаев может являться причиной избыточного кода. Все дело в том, что когда состояние содержит множество полей, обновление которых не производится одновременно, при указании возвращаемого типа как <code>State</code> будет невозможно частичное обновление, поскольку лишь часть типа <code>State</code> не совместимо с целым <code>State</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">/**[0] */</span>\n  yesCount<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  noCount<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span>State<span class=\"token operator\">></span></span><span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    yesCount<span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    noCount<span class=\"token operator\">:</span><span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">buttonA_clickHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// инкрементируем yesCount</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> State <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>yesCount<span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span>yesCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/**1 */</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">buttonB_clickHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// инкрементируем noCount</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> State <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>noCount<span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span>noCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/**[2] */</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Yes<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>yesCount<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>No<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>noCount<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buttonA_clickHandler<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>yes<span class=\"token operator\">++</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buttonB_clickHandler<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>no<span class=\"token operator\">++</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] описание состояния с двумя полями.\n * [1] Error -> поскольку {yesCount: number} не совместим\n * с {yesCount: Number; noCount: number}\n * [2] Error -> поскольку {noCount: number} не совместим\n * с {yesCount: Number; noCount: number}\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">В случае когда функция <code>updater</code> выполняет частичное обновление состояния и при этом тип возвращаемого значения указан явно, необходимо воспользоваться механизмом распространения (<code>spread</code>) дополнив отсутствующую часть в новом состоянии старым.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span>State<span class=\"token operator\">></span></span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">buttonA_clickHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> State <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">/**[0] */</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>prevState<span class=\"token punctuation\">,</span> yesCount<span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span>yesCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">buttonB_clickHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> State <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">/**[1] */</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>prevState<span class=\"token punctuation\">,</span> noCount<span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span>noCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] В обоих случаях ошибки не возникает\n * поскольку недостающая часть состояния\n * дополняется из предыдущего состояния,\n *, что делает тип возвращаемого объекта\n * совместимым с типом State.\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Несмотря на то, что механизм распространения помогает обойти трудности связанные с совместимостью типов, лучшим вариантом будет вообще не указывать возвращаемый функцией <code>updater</code> тип, а возложить эту обязанность на вывод типов.</p><p class=\"content__paragraph\">И последнее о чем ещё не упомянули, что метод <code>setState</code>, в качестве второго параметра принимает функцию обратного вызова, декларация которой очень проста и будет рассмотрена в самом конце данной главы, когда весь код будет собран в одном месте.</p><p class=\"content__paragraph\">И на этом рассмотрение состояния завершено, поэтому можно приступить к рассмотрению третьего и последнего параметра базового типа <code>Component&#x3C;Props, State, Snapshot></code>.</p><p class=\"content__paragraph\">Принципы применяемые для описания типа представляющего <code>Snapshot</code> ничем не отличаются от описания <code>Props</code> и <code>State</code>, поэтому пояснения будут опущены.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> ReactNode<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimerDefaultProps</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimerProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TimerDefaultProps</span> <span class=\"token punctuation\">{</span>\n    duration<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimerState</span> <span class=\"token punctuation\">{</span>\n    time<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// определение Snapshot</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimerSnapshot</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">DefaultProps</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>TimerDefaultProps<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>TimerProps<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">State</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>TimerState<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Snapshot</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>TimerSnapshot<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// создание псевдонима для типа </span>\n\n<span class=\"token comment\">/**\n * [0] передача псевдонима Snapshot\n * в качестве третьего аргумента\n * базового типа.\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> State<span class=\"token punctuation\">,</span> Snapshot <span class=\"token comment\">/** [0] */</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span> \n    <span class=\"token comment\">/**\n     * Поскольку Snapshot используется\n     * в тех конструкциях очередь до которых\n     * ещё не дошла, тело класса будет опущено.\n     */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Timer<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>TimerProps<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Ничего особенного на, что стоило бы обратить внимание нет. Поэтому без лишних комментариев продолжим знакомство с внутренним устройством компонента — его жизненного цикла.</p><p class=\"content__paragraph\">Погружение в типизированный жизненный цикл классовых компонентов необходимо начать с его разделения на две части — <em>актуальный жизненный цикл</em> и <em>устаревший жизненный цикл</em>, который будет исключён из рассмотрения. Поскольку в аннотации методов жизненного цикла не содержится ничего, что было бы непонятно к этому моменту, пояснение каждого отдельного случая будет опущено. Обратить внимание стоит лишь на импорт впервые встречающегося типа <code>ErrorInfo</code> необходимость в котором появляется при определении необязательно метода <code>componentDidCatch</code>. Кроме того, не будет лишнем напомнить, что в строгом, рекомендуемом режиме, при котором все элементы без аннотации неявно принадлежат к типу <code>any</code>, аннотация сигнатур методов является обязательной. И по этому случаю ещё раз стоит упомянуть о пользе коротких псевдонимов заменяющих огромные идентификаторы типов <code>*Props</code>, <code>*State</code> и <code>*Snapshot</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> ReactNode<span class=\"token punctuation\">,</span> ErrorInfo<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// необходимость в импорте типа ErrorInfo</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> State<span class=\"token punctuation\">,</span> Snapshot<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    getDerivedStateFromProps<span class=\"token operator\">?</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> prevState<span class=\"token operator\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Partial<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    getDerivedStateFromError<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Partial<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    \n    componentDidMount<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n    shouldComponentUpdate<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> nextState<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> nextContext<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    componentWillUnmount<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    componentDidCatch<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> Error<span class=\"token punctuation\">,</span> errorInfo<span class=\"token operator\">:</span> ErrorInfo<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    getSnapshotBeforeUpdate<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> prevState<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Snapshot <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    componentDidUpdate<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> prevState<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> snapshot<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Snapshot<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Вдобавок необходимо заметить, что код иллюстрирующий жизненный цикл компонента взят из декларации, устанавливаемой из репозитория <code>@types/react</code>, и именно поэтому она изобилует излишними преобразованиями в <code>Readonly&#x3C;T></code> тип. Но как было отмечено ранее, в этом нет нужны поскольку все типы составляющие троицу аргументов базового типа уже прошли преобразование при определении представляющих их псевдонимов. Учитывая этот факт предыдущий код будет выглядеть следующим образом.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * Более компактная запись\n * без изменения поведения.\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> State<span class=\"token punctuation\">,</span> Snapshot<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    getDerivedStateFromProps<span class=\"token operator\">?</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">,</span> prevState<span class=\"token operator\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Partial<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    getDerivedStateFromError<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Partial<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    \n    componentDidMount<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n    shouldComponentUpdate<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">,</span> nextState<span class=\"token operator\">:</span> State<span class=\"token punctuation\">,</span> nextContext<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    componentWillUnmount<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    componentDidCatch<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> Error<span class=\"token punctuation\">,</span> errorInfo<span class=\"token operator\">:</span> ErrorInfo<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    getSnapshotBeforeUpdate<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">,</span> prevState<span class=\"token operator\">:</span> State<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Snapshot <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    componentDidUpdate<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">,</span> prevState<span class=\"token operator\">:</span> State<span class=\"token punctuation\">,</span> snapshot<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Snapshot<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Следующий в очереди на рассмотрение механизм, получение ссылок на нативные <em>dom элементы</em> и <em>React компоненты</em>, обозначаемый как <em>рефы</em> (<em>refs</em>). </p><p class=\"content__paragraph\">Предположим, что существует форма, которую по событию <code>submit</code> необходимо очистить при помощи нативного метода <code>reset</code>, доступного лишь через нативный <em>dom элемент</em>, ссылку на который можно получить с помощью механизма рефов, применение которого возможно осуществить двумя способами. Первый способ заключается в создании объекта реф с помощью статического метода <code>React.createRef()</code>, а второй в самостоятельном сохранении ссылки на нативный <em>dom элемент</em> с помощью функции обратного вызова.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * задача заключается в\n * получении ссылки на\n * нативный dom елемент формы [0]. \n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CheckList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token comment\">/**[0] */</span>\n            <span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Начнем по порядку. Первым делом необходимо определить поле (в нашем случае это <code>formRef</code>) необходимое для сохранения объекта реф и желательно, что бы оно было закрытое (<code>private</code>) и только для чтения (<code>readonly</code>). В примере поле <code>formRef</code> определен вместе с аннотацией в которой указан импортированный тип <code>RefObject&#x3C;T></code>, где параметр типа принимает тип нативного <em>dom элемента</em>, в нашем случае <code>HTMLFormElement</code>. Но в конкретном примере аннотация излишня поскольку мы указали выводу типов принадлежность нативного <em>dom элемента</em> передав его в качестве аргумента типа функции <code>React.createRef&#x3C;T>()</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> RefObject<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CheckList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n                                    <span class=\"token comment\">/**[1] */</span>                                   <span class=\"token comment\">/**[2] */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> formRef<span class=\"token operator\">:</span> RefObject<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">createRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] импорт типа RefObject&lt;T>\n * который в аннотации [1] поля\n * formRef является излишним,\n * так как тип нативного dom элемента\n * был уточнен с помощь передачи его\n * в качестве аргумента типа функции [2]\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">На следующим шаге устанавливаем объект реф <em>react элементу</em> <code>&#x3C;form></code> и определяем закрытый метод <code>reset</code> в котором происходит вызов метода <code>reset</code> нативной формы. Не будет лишним обратить внимание, что вызов непосредственно метода <code>reset</code> осуществляется при помощи <em>оператора опциональной последовательности</em> (<code>?.</code>). Сделано это по причине возможного отсутствия ссылки на нативный элемент.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> RefObject<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CheckList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> formRef<span class=\"token operator\">:</span> RefObject<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">createRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**[4] */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">resetForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\">/**[5] */</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                        <span class=\"token comment\">/**[3] */</span>\n            <span class=\"token operator\">&lt;</span>form ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formRef<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [3] установка рефа react элементу.\n * [4] определение закрытого метода.\n * [5] необходимость применения оператора\n * опциональной последовательности по причине\n * возможного отсутствия ссылки на нативный элемент.\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Второй способ получения ссылки на нативный элемент заключается в определении функции принимающей в качестве единственного параметра нативный <em>dom элемент</em>, сохранение ссылки на который перекладывается на разработчика.</p><p class=\"content__paragraph\">Для иллюстрации сказанного повторим предыдущий пример. Первым делом импортируем обобщенный тип <code>RefCallback&#x3C;T></code> описывающий функцию и принимающий в качестве аргумента типа тип нативного <em>dom элемента</em>, который будет передан в функцию в качестве единственного аргумента. Затем определим поле <code>formNativeElement</code> с типом <code>union</code>, множество которого включат не только тип нативного элемента, но и <code>null</code>. Это необходимо поскольку при инициализации требуется установить значение принадлежащие к типу <code>null</code>. Это необходимо при активном флаге <code>--strictPropertyInitialization</code> входящим в группировку определяющую рекомендуемый строгий режим компилятора.</p><p class=\"content__paragraph\">Следующим шагом происходит определение закрытого только для чтения поля <code>formRefCallback</code> которому в качестве значения присвоена стрелочная функция. Единственный параметр данной функции лишен аннотации тпа, поскольку вывод типов определит его как принадлежащего к переданному в качестве аргумента типа <code>RefCallback&#x3C;T></code>. В теле данной функции происходит присваивание её параметра полю <code>formNativeElement</code> определенному на предыдущем шаге.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">                            <span class=\"token comment\">/**[0] */</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> RefCallback<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CheckList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">/**[1] */</span>               <span class=\"token comment\">/**[2] */</span>     <span class=\"token comment\">/**[3] */</span>\n    <span class=\"token keyword\">private</span> formNativeElement<span class=\"token operator\">:</span> HTMLFormElement <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">/**[4] */</span>                    <span class=\"token comment\">/**[5] */</span>      <span class=\"token comment\">/**[6] */</span>                       <span class=\"token comment\">/**[7] */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> formRefCallback<span class=\"token operator\">:</span> RefCallback<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span> <span class=\"token operator\">=</span> element <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formNativeElement <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] импорт типа RefCallback&lt;T> который в качестве аргумента\n * типа ожидает тип нативного элемента.\n * [1] определение поля formNativeElement\n * и присвоение ему значения null [3], что приводит\n * к необходимости объединенного типа включающего\n * тип null [2]. [4] определение поля formRefCallback\n * значением которого служит стрелочная функция принимающая в\n * качестве единственного параметра нативный элемент [6] который затем\n * присваивается полю formNativeElement [7]. Тип этого параметра\n * будет принадлежать к типу переданному в качестве аргумента типа RefCallback&lt;T> [5]\n * \n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Стоит заметить, что, то же самое можно реализовать и без помощи типа импортированного <code>RefCallback&#x3C;T></code>. Для этого лишь потребуется самостоятельно добавить аннотацию типа для параметра функции обратного вызова.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CheckList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> formNativeElement<span class=\"token operator\">:</span> HTMLFormElement <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token function-variable function\">formRefCallback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>element<span class=\"token operator\">:</span> HTMLFormElement<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formNativeElement <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] определение поля formNativeElement\n * и присвоение ему значения null [2], что приводит\n * к необходимости объединенного типа включающего\n * тип null [1]. [3] определение поля formRefCallback\n * значением которого служит стрелочная функция в качестве\n * аргумента которая ожидает нативный элемент [4] который\n * затем присваивается полю formNativeElement [5]\n * \n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Выбор того или иного способа зависит лишь от предпочтений самого разработчика.</p><p class=\"content__paragraph\">Продолжим доведение примера до финального состояния и установим созданную в первом случае функцию обратного вызова <em>react элементу</em> <code>&#x3C;form></code> в качестве реф. Также определим уже известный метод <code>reset</code> в теле которого будет происходить вызов метода <code>reset</code> у нативного <em>dom элемента</em> ссылка на который будет сохранена в поле класса <code>formNativeElement</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> RefCallback<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CheckList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> formNativeElement<span class=\"token operator\">:</span> HTMLFormElement <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> formRefCallback<span class=\"token operator\">:</span> RefCallback<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span> <span class=\"token operator\">=</span> element <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formNativeElement <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\">/**[1] */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">/**[2] */</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formNativeElement<span class=\"token operator\">?.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                            <span class=\"token comment\">/**[0] */</span>\n            <span class=\"token operator\">&lt;</span>form ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formRefCallback<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] устанавливаем callback в качестве значения реф\n * после чего определяем метод reset [1] в теле которого\n * при помощи оператора опциональной последовательности\n * вызываем метод reset у нативного dom элемента сохранённого\n * в поле formNativeElement [2]\n * \n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">И раз уж тема дошла до рассмотрения рефов, то необходимо рассмотреть механизм получения с их помощью ссылки на классовый компонент.</p><p class=\"content__paragraph\">Первым делом определим классовый компонент <code>Slider</code> реализующий два открытых метода предназначенных для перелистывания контента <code>prev</code> и <code>next</code>. Далее определим компонент <code>App</code> в теле которого определим рефу при помощи функции <code>createRef</code>, которой (рефе) в качестве аргумента типа передадим тип классового компонента <code>Slider</code>. Таким образом вывод типа определит рефу <code>sliderRef</code>, как принадлежащую к типу <code>RefObject&#x3C;Slider></code>. После этого в методе рендер создадим экземпляр компонента <code>Slider</code> и два <em>react элемента</em> <code>&#x3C;button></code>, в обработчиках событий <code>click</code> которых происходит взаимодействие с компонентом <code>Slider</code> при помощи ссылки на него доступной через ассоциированную непосредственно с ним рефу.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> createRef<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Slider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function-variable function\">prev</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/**[0] */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function-variable function\">next</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/**[1] */</span>\n    \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n                     <span class=\"token comment\">/**[2]                 [3]*/</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> sliderRef <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Slider<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sliderRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">prev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>prev<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/**[4] */</span><span class=\"token punctuation\">}</span>\n                <span class=\"token operator\">&lt;</span>Slider ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sliderRef<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/**[5] */</span><span class=\"token punctuation\">}</span>\n                <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sliderRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>next<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/**[6] */</span><span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] псевдо компонент Slider реализует\n * два доступных метода перелистывания контента\n * назад [0] и вперед [1]. Псевдо компонент App\n * определяет рефу с помощью универсальной функции\n * createRef в качестве аргумента типа которой был\n * установлен тип компонента Slider. В методе render\n * происходит определение двух пользовательских кнопок\n * выполняющих перелистывание по событию click, в обработчиках\n * событий которых происходит вызов доступных методов prev [4]\n * и next [6] через рефу ассоциированную непосредственно с компонентом [5]\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">На этом рассмотрение работы с механизмом рефов в типизированном стиле завершено. Но до завершения знакомства с работой классового компонента в основе которого лежит <code>Component&#x3C;Props, State, Snapshot></code> осталась ещё одна тема, а именно работа с <em>React событиями</em>. Кроме того, её освещение будет являться альтернативным решением задачи получения доступа к нативному элементу. Простыми словами реализуем вызов метода <code>reset</code> у нативного <em>dom элемента</em> ссылку на который будет получена из объекта события <code>submit</code>. Но поскольку данная тема была подробна рассмотрена в главе посвященной функциональным компонентам, здесь подробно будут освещены только моменты присущие исключительно классовым компонентам.</p><p class=\"content__paragraph\">Первым делом возвратим предыдущий пример в первоначальное состояние и добавим кнопку для отправки формы.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Form</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>button <span class=\"token keyword\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Далее нам потребуется определить закрытое поле только для чтения в качестве значения которого будет присвоена стрелочная функция способная сохранить контекст текущего экземпляра. В качестве типа данного поля укажем импортированный из пространства имен <em>React</em> ранее рассмотренный обобщенный тип <code>ReactEventHandler&#x3C;T></code>. </p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">                              <span class=\"token comment\">/**[0] */</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> ReactEventHandler<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Form</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token comment\">/**[1] */</span>                         <span class=\"token comment\">/**[2] */</span>     <span class=\"token comment\">/**[3] */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> form_submitHandler<span class=\"token operator\">:</span> ReactEventHandler<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span> <span class=\"token operator\">=</span> event <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                                    <span class=\"token comment\">/**[4] */</span>\n            <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>form_submitHandler<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>button <span class=\"token keyword\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] импорт типа ReactEventHandler&lt;T>\n * представляющего слушателя события.\n * [1]  Определение закрытого неизменяемого\n * поля принадлежащего к функциональному \n * типу ReactEventHandler&lt;T>. [2] тип нативного\n * dom элемента определенного стандартной\n * библиотекой. [3] единственный параметр\n * функции не нуждается в аннотации поскольку\n * вывод типа опирается на ReactEventHandler&lt;T>.\n * [4] установка слушателя.\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Для завершения примера осталось всего-навсего написать логику слушателя события <code>submit</code>, которая также повторяет пример из главы посвященной функциональным компонентам и поэтому подробных комментариев не будет.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Form</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> form_submitHandler<span class=\"token operator\">:</span> ReactEventHandler<span class=\"token operator\">&lt;</span>FormEvent<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">>></span> <span class=\"token operator\">=</span> event <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0]</span>\n        <span class=\"token keyword\">let</span> form <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target <span class=\"token keyword\">as</span> HTMLFormElement<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1]</span>\n        form<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] для предотвращения отправки формы\n * и перезагрузки страницы прерываем стандартное\n * поведение. [1] поскольку доступ к форме можно\n * получить через ссылку свойства target принадлежащего\n * к типу EventTarget, появляется необходимость в\n * приведении к типу HTMLFormElement с при помощи оператора as.\n * [2] вызываем метод reset.\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Данный способ типизирования слушателей событий является предпочтительным поскольку при таком подходе аннотация включает только два типа и, кроме того, стрелочная функция уберегает от неминуемой потери контекста. Случаи требующие определения слушателя как метода класса требуют другого подхода. Отличие заключается в том, что в аннотировании типа нуждается непосредственно параметр слушателя. Но поскольку <em>React</em> делегирует все нативные события, необходимо импортировать тип соответствующего события из его пространства имен. Для событий связанных с формами в <em>React</em> определен обобщенный тип <code>FormEvent&#x3C;T></code> ожидающий в качестве аргумента типа тип нативного элемента. И поскольку слушатель ничего не возвращает, то тип возвращаемого значения, явное указание которого излишне, определяется как <code>void</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">                            <span class=\"token comment\">/**[0] */</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> FormEvent<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Form</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**[1] */</span>                          <span class=\"token comment\">/**[2] */</span>        <span class=\"token comment\">/**[3] */</span>\n    <span class=\"token function\">form_submitHandler</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> FormEvent<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] импортируем тип FormEvent&lt;T> после \n * чего определяем метод form_submitHandler\n * тип единственного параметра которого определен\n * как FormEvent&lt;HTMLFormElement>, а возвращаемое\n * значение [3] которое указанно лишь для того, что бы\n * напомнить об отсутствии необходимости в его явном указании.\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Поскольку установка слушателя представляемого методом класса приведет к неминуемой потери контекста, прибегать к подобному объявлению стоит только при условии, что их тело лишено логики предполагающей обращение к членам через ссылку экземпляра <code>this</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Form</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">form_submitHandler</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> FormEvent<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**\n         * Здесь нельзя обращаться к this\n         * поскольку контекст на текущий экземпляр\n         * был утерян.\n         */</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>form_submitHandler<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Контекст можно было бы сохранить прибегнув к методу <code>bind</code> или делегированию события непосредственно с помощью стрелочной функции определенной в месте установки слушателя, но зачем? Для <code>bind</code> потребуется определения дополнительного поля.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Form</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// дополнительное поле</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function-variable function\">form_submitHandlerBinded</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> FormEvent<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span>Props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// лишняя инициализация</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>form_submitHandlerBinded <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">form_submitHandler</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token function\">form_submitHandler</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> FormEvent<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**\n         * Теперь здесь можно обращаться к this\n         */</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token comment\">// в качестве слушателя установлена функция связанная с помощью bind</span>\n            <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>form_submitHandlerBinded<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Стрелочная функция будет пересоздаваться каждую отрисовку.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Form</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">form_submitHandler</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> FormEvent<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**\n         * Теперь здесь можно обращаться к this\n         */</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token comment\">// пересоздание функции каждую отрисовку</span>\n            <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>event <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">form_submitHandler</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Кроме того, оба случая затрудняют понимание кода. Поэтому необходимо повторить, что использовать метод класса в качестве слушателя события стоит только при отсутствии необходимости в обращении через ссылку <code>this</code>. При возникновении именно такого случая не будет лишним уточнения способа выбора типа события. В приведенном примере это был <code>FormEvent&#x3C;T></code>, поскольку работа производилась с формой. Для других событий появится необходимость в других соответствующих типа, узнать которые можно с помощью подсказок вашей <em>ide</em>. Для чего всего-лишь необходимо навести курсор на определение слушателя события.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clicker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                <span class=\"token comment\">/**[0] */</span>\n            <span class=\"token operator\">&lt;</span>div onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] при наведении курсором\n * на определение слушателя onClick\n * ide подсказывает тип как MouseEvent&lt;HTMLDivElement>\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Также не забываем об упомянутом ранее базовом для всех событийных <em>React</em> типов обобщенном типе <code>SyntheticEvent&#x3C;T></code>, который в качестве аргумента ожидает тип представляющий нативный элемент.</p><p class=\"content__paragraph\">На этом тему посвященную созданию классового компонента расширяющего <code>Component&#x3C;Props, State, Snapshot></code> можно заканчивать и переходить к следующей теме. Единственное, что точно не будет лишним, так это собрать весь пройденный материал в одном месте.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> ReactNode<span class=\"token punctuation\">,</span> ReactEventHandler<span class=\"token punctuation\">,</span> RefObject<span class=\"token punctuation\">,</span> SyntheticEvent<span class=\"token punctuation\">,</span> ErrorInfo<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">GreeterDefaultProps</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// для декларации свойств по умолчанию</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">GreeterProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GreeterDefaultProps</span> <span class=\"token punctuation\">{</span>\n    children<span class=\"token operator\">:</span> ReactNode <span class=\"token operator\">|</span> ReactNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// указываем, что children могут принадлежать к единичному типу или множеству составляющего тип ReactNode</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// для декларации обязательных свойств + экспорт интерфейса</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">GreeterState</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// для декларации состояния</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">GreeterSnapshot</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// для декларации снимка</span>\n\n<span class=\"token comment\">// создаем псевдонимы для readonly типов представляющих...</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">DefaultProps</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>GreeterDefaultProps<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ... статическое поле defaultProps</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>GreeterProps<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ... поле props</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">State</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>GreeterState<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ... поле state</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Snapshot</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>GreeterSnapshot<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ... параметр snapshot определенный в нескольких методах жизненного цикла</span>\n\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> State<span class=\"token punctuation\">,</span> Snapshot<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> defaultProps<span class=\"token operator\">:</span> DefaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// модификатор readonly от случайного изменения статического поля defaultProps которое должно иметь модификатор доступа public</span>\n\n\n    <span class=\"token comment\">// необязательные методы класса (статические методы)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> getDerivedStateFromProps<span class=\"token operator\">?</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">,</span> prevState<span class=\"token operator\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Partial<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> getDerivedStateFromError<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Partial<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> state<span class=\"token operator\">:</span> State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// модификатор readonly от случайного изменения поля state которое должно иметь модификатор доступа public</span>\n\n\n    <span class=\"token comment\">/** два различных способа получения ссылки на нативный dom элемент */</span>\n    <span class=\"token comment\">// [0] при помощи контейнера</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> formRef<span class=\"token operator\">:</span> RefObject<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// создание объекта RefObject, с помощью которого будет получена ссылка на dom элемент</span>\n    \n    <span class=\"token comment\">// [1] при помощи callback</span>\n    <span class=\"token keyword\">private</span> textRef<span class=\"token operator\">:</span> HTMLSpanElement <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// поле, в которое будет сохранена ссылка на DOM-элемент</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token function-variable function\">textRefCallback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>element<span class=\"token operator\">:</span> HTMLSpanElement<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textRef <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span> <span class=\"token comment\">// определение функции обратного вызова для установления ссылки на DOM-элемент</span>\n\n\n\n    <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    \n    <span class=\"token comment\">// методы жизненного цикла</span>\n    <span class=\"token keyword\">public</span> componentDidMount<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n    <span class=\"token keyword\">public</span> shouldComponentUpdate<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">,</span> nextState<span class=\"token operator\">:</span> State<span class=\"token punctuation\">,</span> nextContext<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> componentWillUnmount<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> componentDidCatch<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> Error<span class=\"token punctuation\">,</span> errorInfo<span class=\"token operator\">:</span> ErrorInfo<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> getSnapshotBeforeUpdate<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">,</span> prevState<span class=\"token operator\">:</span> State<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Snapshot <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> componentDidUpdate<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">,</span> prevState<span class=\"token operator\">:</span> State<span class=\"token punctuation\">,</span> snapshot<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Snapshot<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\">/** два варианта определения слушателя событий */</span>\n    <span class=\"token comment\">// слушатель событий определенный как поле</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> form_submitHandler<span class=\"token operator\">:</span> ReactEventHandler<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span> <span class=\"token operator\">=</span> event <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// изменение состояния</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prevState<span class=\"token operator\">:</span> State<span class=\"token punctuation\">,</span> prevProps<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// слушатель событий определенный как метод</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">submitButton_clickHandler</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> SyntheticEvent<span class=\"token operator\">&lt;</span>HTMLButtonElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReactNode <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>form ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formRef<span class=\"token punctuation\">}</span> onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>form_submitHandler<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>span ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textRefCallback<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Send form<span class=\"token operator\">?</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>button <span class=\"token keyword\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>submitButton_clickHandler<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>yes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div></section>\n<section class=\"content__section\" id=\"Proizvodnye_ot_PureComponent<Props,State,Snapshot>\"><h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"Proizvodnye_ot_PureComponent<Props,State,Snapshot>\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Производные от PureComponent&#x3C;Props, State, Snapshot></span></h2><p class=\"content__paragraph\">Помимо того, что пользовательские компоненты могут быть производными от универсального класс <code>Component&#x3C;Props, State, Snapshot></code>, они также могут использовать в качестве базового класса универсальный класс <code>PureComponent&#x3C;Props, State, Snapshot></code>. Но поскольку все, что было сказано относительно <code>Component</code> в ста процентах случаев верно и для <code>PureComponent</code>, который также ничего нового не привносит, то данная глава будет ограничена лишь кодом иллюстрирующим определение пользовательского компонента.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> PureComponent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**[*] */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PureComponent<span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> State<span class=\"token punctuation\">,</span> Snapshot<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**[*] */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [*] здесь предполагается логика\n * рассмотренная в главе, посвященной\n * производным от Component&lt;P, S, SS>\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Тем кто только начал своё знакомство с классовыми компонентами с данной главы необходимо вернутся на шаг назад или даже более разумно в самое начало, поскольку именно там объясняется, что для полного понимания необходимо ознакомиться со всем материалом относящимся к <em>React</em>.</p></section>","commitInfoAll":[{"committedDate":"2020-09-28T13:27:58Z","message":"book(изменение): rethink chapter 050\n\nrethink chapter 050","messageHeadline":"book(изменение): rethink chapter 050","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars.githubusercontent.com/u/31518738?v=4"}},{"committedDate":"2021-03-22T08:08:33Z","message":"fixed grammar and syntax errors in the text","messageHeadline":"fixed grammar and syntax errors in the text","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"mindyourlifeguide","bio":"Front-end developer","location":"Kyiv, Ukraine","avatarUrl":"https://avatars.githubusercontent.com/u/35348648?u=d52456eed154db660092623fe6e0ebb516677a95&v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/book/undefined/050\\.\\(React\\) Классовые компоненты/content.md"},"pageNavDataAll":[{"name":"Что такое и для чего нужен TypeScript","path":"Chto_takoe_i_dlya_chego_nujen_TypeScript","sections":[{"name":"Что такое TypeScript","path":"Chto_takoe_TypeScript"},{"name":"История TypeScript","path":"Istoriya_TypeScript"},{"name":"Для чего нужен TypeScript","path":"Dlya_chego_nujen_TypeScript"},{"name":"Зачем разработчику TypeScript","path":"Zachem_razrabotchiku_TypeScript"}]},{"name":"Вступление","path":"Vstuplenie","sections":[]},{"name":"Система типов, тип данных, значимые и ссылочные типы","path":"Sistema_tipov,tip_dannyh,znachimye_i_ssylochnye_tipy","sections":[{"name":"Система Типов","path":"Sistema_Tipov"},{"name":"Тип данных (тип)","path":"Tip_dannyh_(tip)"},{"name":"Тип данных, передающийся по значению (примитивный тип)","path":"Tip_dannyh,peredaushchiisya_po_znacheniu_(primitivnyi_tip)"},{"name":"Тип данных, передающийся по ссылке","path":"Tip_dannyh,peredaushchiisya_po_ssylke"}]},{"name":"Связывание, типизация, вывод типов","path":"Svyazyvanie,tipizaciya,vyvod_tipov","sections":[{"name":"Обработка кода компилятором","path":"Obrabotka_koda_kompilyatorom"},{"name":"Лексический анализ (токенизация - tokenizing)","path":"Leksicheskii_analiz_(tokenizaciya_-_tokenizing)"},{"name":"Синтаксический анализ (разбор - parsing)","path":"Sintaksicheskii_analiz_(razbor_-_parsing)"},{"name":"Семантический анализ","path":"Semanticheskii_analiz"},{"name":"Связывание (Binding)","path":"Svyazyvanie_(Binding)"},{"name":"Типизация","path":"Tipizaciya"},{"name":"Вывод Типов (type inference)","path":"Vyvod_Tipov_(type_inference)"}]},{"name":"Преобразование типов","path":"Preobrazovanie_tipov","sections":[{"name":"Неявные Преобразования","path":"Neyavnye_Preobrazovaniya"},{"name":"Явные Преобразования","path":"Yavnye_Preobrazovaniya"}]},{"name":"Типизированные и нетипизированные языки программирования","path":"Tipizirovannye_i_netipizirovannye_yazyki_programmirovaniya","sections":[{"name":"Нетипизированные языки","path":"Netipizirovannye_yazyki"},{"name":"Типизированные языки","path":"Tipizirovannye_yazyki"}]},{"name":"Статическая и динамическая типизация","path":"Staticheskaya_i_dinamicheskaya_tipizaciya","sections":[{"name":"Статическая типизация (Static Typing)","path":"Staticheskaya_tipizaciya_(Static_Typing)"},{"name":"Динамическая Типизация (Dynamic Typing)","path":"Dinamicheskaya_Tipizaciya_(Dynamic_Typing)"}]},{"name":"Сильная и слабая типизация","path":"Silnaya_i_slabaya_tipizaciya","sections":[{"name":"Сильная типизация (strongly typed)","path":"Silnaya_tipizaciya_(strongly_typed)"},{"name":"Слабая типизация (weakly typed)","path":"Slabaya_tipizaciya_(weakly_typed)"}]},{"name":"Явная и неявная типизация","path":"Yavnaya_i_neyavnaya_tipizaciya","sections":[{"name":"Явная типизация (explicit typing)","path":"Yavnaya_tipizaciya_(explicit_typing)"},{"name":"Неявная типизация (implicit typing)","path":"Neyavnaya_tipizaciya_(implicit_typing)"}]},{"name":"Совместимость типов на основе вида типизации","path":"Sovmestimost_tipov_na_osnove_vida_tipizacii","sections":[{"name":"Совместимость типов (Types Compatibility)","path":"Sovmestimost_tipov_(Types_Compatibility)"},{"name":"Номинативная Типизация (nominative typing)","path":"Nominativnaya_Tipizaciya_(nominative_typing)"},{"name":"Структурная Типизация (structural typing)","path":"Strukturnaya_Tipizaciya_(structural_typing)"},{"name":"Утиная Типизация (Duck typing)","path":"Utinaya_Tipizaciya_(Duck_typing)"}]},{"name":"Совместимость типов на основе вариантности","path":"Sovmestimost_tipov_na_osnove_variantnosti","sections":[{"name":"Вариантность","path":"Variantnost"},{"name":"Иерархия наследования","path":"Ierarhiya_nasledovaniya"},{"name":"Ковариантность","path":"Kovariantnost"},{"name":"Контравариантность","path":"Kontravariantnost"},{"name":"Инвариантность","path":"Invariantnost"},{"name":"Бивариантность","path":"Bivariantnost"}]},{"name":"Аннотация Типов","path":"Annotaciya_Tipov","sections":[{"name":"Аннотация Типов - общее","path":"Annotaciya_Tipov_-_obshchee"},{"name":"Аннотация типа","path":"Annotaciya_tipa"},{"name":"Синтаксические конструкции var, let, const","path":"Sintaksicheskie_konstrukcii_var,let,const"},{"name":"Функции (function)","path":"Funkcii_(function)"},{"name":"Стрелочные Функции (arrow function)","path":"Strelochnye_Funkcii_(arrow_function)"},{"name":"Классы (class)","path":"Klassy_(class)"},{"name":"Сравнение Синтаксиса TypeScript и JavaScript","path":"Sravnenie_Sintaksisa_TypeScript_i_JavaScript"},{"name":"Итог","path":"Itog"}]},{"name":"Базовый Тип Any","path":"Bazovyi_Tip_Any","sections":[{"name":"Any (any) произвольный тип","path":"Any_(any)_proizvolnyi_tip"}]},{"name":"Примитивные типы Number, String, Boolean, Symbol, BigInt","path":"Primitivnye_tipy_Number,String,Boolean,Symbol,BigInt","sections":[{"name":"Важно","path":"Vajno"},{"name":"Number (number) примитивный числовой тип","path":"Number_(number)_primitivnyi_chislovoi_tip"},{"name":"String (string) примитивный строковый тип","path":"String_(string)_primitivnyi_strokovyi_tip"},{"name":"Boolean (boolean) примитивный логический тип","path":"Boolean_(boolean)_primitivnyi_logicheskii_tip"},{"name":"Symbol (symbol) примитивный символьный тип","path":"Symbol_(symbol)_primitivnyi_simvolnyi_tip"},{"name":"BigInt (bigint) примитивный числовой тип","path":"BigInt_(bigint)_primitivnyi_chislovoi_tip"}]},{"name":"Примитивные типы Null, Undefined, Void, Never, Unknown","path":"Primitivnye_tipy_Null,Undefined,Void,Never,Unknown","sections":[{"name":"Важно","path":"Vajno"},{"name":"Null (null) примитивный null тип","path":"Null_(null)_primitivnyi_null_tip"},{"name":"Undefined (undefined) примитивный неопределенный тип","path":"Undefined_(undefined)_primitivnyi_neopredelennyi_tip"},{"name":"Void (void) отсутствие конкретного типа","path":"Void_(void)_otsutstvie_konkretnogo_tipa"},{"name":"Never (never) примитивный тип","path":"Never_(never)_primitivnyi_tip"},{"name":"Unknown (unknown)","path":"Unknown_(unknown)"}]},{"name":"Примитивный Тип Enum","path":"Primitivnyi_Tip_Enum","sections":[{"name":"Enum (enum) примитивный перечисляемый тип","path":"Enum_(enum)_primitivnyi_perechislyaemyi_tip"},{"name":"Перечисления с числовым значением","path":"Perechisleniya_s_chislovym_znacheniem"},{"name":"Перечисления со строковым значением","path":"Perechisleniya_so_strokovym_znacheniem"},{"name":"Смешанное перечисление (mixed enum)","path":"Smeshannoe_perechislenie_(mixed_enum)"},{"name":"Перечисление в качестве типа данных","path":"Perechislenie_v_kachestve_tipa_dannyh"},{"name":"Перечисление const с числовым и строковым значением","path":"Perechislenie_const_s_chislovym_i_strokovym_znacheniem"},{"name":"Когда стоит применять enum?","path":"Kogda_stoit_primenyat_enum?"}]},{"name":"Типы - Union, Intersection","path":"Tipy_-_Union,Intersection","sections":[{"name":"Тип Объединение (Union Types)","path":"Tip_Obedinenie_(Union_Types)"},{"name":"Тип Пересечение (Intersection Type)","path":"Tip_Peresechenie_(Intersection_Type)"}]},{"name":"Type Queries (запросы типа), Alias (псевдонимы типа)","path":"Type_Queries_(zaprosy_tipa),Alias_(psevdonimy_tipa)","sections":[{"name":"Запросы Типа (Type Queries)","path":"Zaprosy_Tipa_(Type_Queries)"},{"name":"Псевдонимы Типов (Type Aliases)","path":"Psevdonimy_Tipov_(Type_Aliases)"}]},{"name":"Примитивные литеральные типы Number, String, Template String, Boolean, Unique Symbol, Enum","path":"Primitivnye_literalnye_tipy_Number,String,Template_String,Boolean,Unique_Symbol,Enum","sections":[{"name":"Литеральный тип Number (Numeric Literal Types)","path":"Literalnyi_tip_Number_(Numeric_Literal_Types)"},{"name":"Литеральный тип String (String Literal Types)","path":"Literalnyi_tip_String_(String_Literal_Types)"},{"name":"Шаблонный литеральный тип String (Template String Literal Types)","path":"Shablonnyi_literalnyi_tip_String_(Template_String_Literal_Types)"},{"name":"Литеральный Тип Boolean (Boolean Literal Types)","path":"Literalnyi_Tip_Boolean_(Boolean_Literal_Types)"},{"name":"Литеральный Тип Unique Symbol (unique symbol) уникальный символьный тип","path":"Literalnyi_Tip_Unique_Symbol_(unique_symbol)_unikalnyi_simvolnyi_tip"},{"name":"Литеральный тип Enum (Enum Literal Types)","path":"Literalnyi_tip_Enum_(Enum_Literal_Types)"}]},{"name":"Object, Array, Tuple","path":"Object,Array,Tuple","sections":[{"name":"Object (object) — ссылочный объектный тип","path":"Object_(object)_—_ssylochnyi_obektnyi_tip"},{"name":"Array (type[]) ссылочный массивоподобный тип","path":"Array_(type[])_ssylochnyi_massivopodobnyi_tip"},{"name":"Tuple ([T0, T1, …, Tn]) тип кортеж","path":"Tuple_([T0,T1,…,Tn])_tip_kortej"}]},{"name":"Function, Functional Types","path":"Function,Functional_Types","sections":[{"name":"Function Types - тип функция","path":"Function_Types_-_tip_funkciya"},{"name":"Functional Types - функциональный тип","path":"Functional_Types_-_funkcionalnyi_tip"},{"name":"this в сигнатуре функции","path":"this_v_signature_funkcii"}]},{"name":"Interfaces","path":"Interfaces","sections":[{"name":"Общая теория","path":"Obshchaya_teoriya"},{"name":"Интерфейс в TypeScript","path":"Interfeis_v_TypeScript"},{"name":"Объявление (declaration)","path":"Obyavlenie_(declaration)"},{"name":"Конвенции именования интерфейсов","path":"Konvencii_imenovaniya_interfeisov"},{"name":"Реализация интерфейса (implements)","path":"Realizaciya_interfeisa_(implements)"},{"name":"Декларация свойств get и set (accessors)","path":"Deklaraciya_svoistv_get_i_set_(accessors)"},{"name":"Указание интерфейса в качестве типа (interface types)","path":"Ukazanie_interfeisa_v_kachestve_tipa_(interface_types)"},{"name":"Расширение интерфейсов (extends interface)","path":"Rasshirenie_interfeisov_(extends_interface)"},{"name":"Расширение интерфейсом класса (extends class)","path":"Rasshirenie_interfeisom_klassa_(extends_class)"},{"name":"Описание класса (функции-конструктора)","path":"Opisanie_klassa_(funkcii-konstruktora)"},{"name":"Описание функционального выражения","path":"Opisanie_funkcionalnogo_vyrajeniya"},{"name":"Описание индексных членов в объектных типов","path":"Opisanie_indeksnyh_chlenov_v_obektnyh_tipov"},{"name":"Инлайн интерфейсы (Inline Interface)","path":"Inlain_interfeisy_(Inline_Interface)"},{"name":"Слияние интерфейсов","path":"Sliyanie_interfeisov"}]},{"name":"Объектные типы с индексными членами (объектный тип с динамическими ключами)","path":"Obektnye_tipy_s_indeksnymi_chlenami_(obektnyi_tip_s_dinamicheskimi_kluchami)","sections":[{"name":"Индексные члены (определение динамических ключей)","path":"Indeksnye_chleny_(opredelenie_dinamicheskih_kluchei)"},{"name":"Строгая проверка при обращении к динамическим ключам","path":"Strogaya_proverka_pri_obrashchenii_k_dinamicheskim_klucham"},{"name":"Запрет обращения к динамическим ключам через точечную нотацию","path":"Zapret_obrashcheniya_k_dinamicheskim_klucham_cherez_tochechnuu_notaciu"},{"name":"Тонкости совместимости индексной сигнатурой с необязательными полями","path":"Tonkosti_sovmestimosti_indeksnoi_signaturoi_s_neobyazatelnymi_polyami"}]},{"name":"Модификаторы доступа (Access Modifiers)","path":"Modifikatory_dostupa_(Access_Modifiers)","sections":[{"name":"Модификатор доступа public (публичный)","path":"Modifikator_dostupa_public_(publichnyi)"},{"name":"Модификатор доступа private (закрытый или скрытый)","path":"Modifikator_dostupa_private_(zakrytyi_ili_skrytyi)"},{"name":"Модификатор доступа protected (защищенный)","path":"Modifikator_dostupa_protected_(zashchishchennyi)"},{"name":"Модификаторы доступа и конструкторы класса","path":"Modifikatory_dostupa_i_konstruktory_klassa"},{"name":"Быстрое объявление полей","path":"Bystroe_obyavlenie_polei"}]},{"name":"Закрытые поля определенные спецификацией ECMAScript","path":"Zakrytye_polya_opredelennye_specifikaciei_ECMAScript","sections":[{"name":"Нативный закрытый (private) модификатор доступа","path":"Nativnyi_zakrytyi_(private)_modifikator_dostupa"}]},{"name":"Абстрактные классы (abstract classes)","path":"Abstraktnye_klassy_(abstract_classes)","sections":[{"name":"Общие характеристики","path":"Obshchie_harakteristiki"},{"name":"Теория","path":"Teoriya"}]},{"name":"Полиморфный тип this","path":"Polimorfnyi_tip_this","sections":[{"name":"this - как тип","path":"this_-_kak_tip"}]},{"name":"Модификатор readonly (только для чтения)","path":"Modifikator_readonly_(tolko_dlya_chteniya)","sections":[{"name":"Модификатор readonly","path":"Modifikator_readonly"}]},{"name":"Definite Assignment Assertion Modifier","path":"Definite_Assignment_Assertion_Modifier","sections":[{"name":"Модификатор утверждения не принадлежности значения к типу undefined","path":"Modifikator_utverjdeniya_ne_prinadlejnosti_znacheniya_k_tipu_undefined"}]},{"name":"Классы — Тонкости","path":"Klassy_—_Tonkosti","sections":[{"name":"Классы - Тонкости implements","path":"Klassy_-_Tonkosti_implements"},{"name":"Частичное слияние интерфейса с классом","path":"Chastichnoe_sliyanie_interfeisa_s_klassom"},{"name":"Переопределение свойств полями и наоборот при наследовании","path":"Pereopredelenie_svoistv_polyami_i_naoborot_pri_nasledovanii"}]},{"name":"Различия var, let, const и модификатора readonly при неявном указании примитивных типов","path":"Razlichiya_var,let,const_i_modifikatora_readonly_pri_neyavnom_ukazanii_primitivnyh_tipov","sections":[{"name":"Нюансы на практике","path":"Nuansy_na_praktike"}]},{"name":"Операторы - Optional, Not-Null Not-Undefined, Definite Assignment Assertion","path":"Operatory_-_Optional,Not-Null_Not-Undefined,Definite_Assignment_Assertion","sections":[{"name":"Необязательные поля, параметры и методы (Optional Fields, Parameters and Methods)","path":"Neobyazatelnye_polya,parametry_i_metody_(Optional_Fields,Parameters_and_Methods)"},{"name":"Оператор ! (Non-Null and Non-Undefined Operator)","path":"Operator_!_(Non-Null_and_Non-Undefined_Operator)"},{"name":"Оператор ! (Definite Assignment Assertion)","path":"Operator_!_(Definite_Assignment_Assertion)"}]},{"name":"Обобщения (Generics)","path":"Obobshcheniya_(Generics)","sections":[{"name":"Обобщения - общие понятия","path":"Obobshcheniya_-_obshchie_ponyatiya"},{"name":"Обобщения в TypeScript","path":"Obobshcheniya_v_TypeScript"},{"name":"Параметры типа - extends (generic constraints)","path":"Parametry_tipa_-_extends_(generic_constraints)"},{"name":"Параметра типа - значение по умолчанию = (generic parameter defaults)","path":"Parametra_tipa_-_znachenie_po_umolchaniu_=_(generic_parameter_defaults)"},{"name":"Параметры типа - как тип данных","path":"Parametry_tipa_-_kak_tip_dannyh"}]},{"name":"Дискриминантное объединение (Discriminated Union)","path":"Diskriminantnoe_obedinenie_(Discriminated_Union)","sections":[{"name":"Дискриминантное объединение","path":"Diskriminantnoe_obedinenie"}]},{"name":"Импорт и экспорт только типа","path":"Import_i_eksport_tolko_tipa","sections":[{"name":"Предыстория возникновения import type и export type","path":"Predystoriya_vozniknoveniya_import_type_i_export_type"},{"name":"import type и export type - форма объявления","path":"import_type_i_export_type_-_forma_obyavleniya"},{"name":"Импорт и экспорт только типа на практике","path":"Import_i_eksport_tolko_tipa_na_praktike"},{"name":"Вспомогательный флаг --importsNotUsedAsValues","path":"Vspomogatelnyi_flag_--importsNotUsedAsValues"}]},{"name":"Утверждение типов (Type Assertion)","path":"Utverjdenie_tipov_(Type_Assertion)","sections":[{"name":"Утверждение типов - общее","path":"Utverjdenie_tipov_-_obshchee"},{"name":"Утверждение типа с помощью <Type> синтаксиса","path":"Utverjdenie_tipa_s_pomoshchu_<Type>_sintaksisa"},{"name":"Утверждение типа с помощью оператора as","path":"Utverjdenie_tipa_s_pomoshchu_operatora_as"},{"name":"Приведение (утверждение) к константе (const assertion)","path":"Privedenie_(utverjdenie)_k_konstante_(const_assertion)"},{"name":"Утверждение в сигнатуре (Signature Assertion)","path":"Utverjdenie_v_signature_(Signature_Assertion)"}]},{"name":"Защитники типа","path":"Zashchitniki_tipa","sections":[{"name":"Защитники Типа - общее","path":"Zashchitniki_Tipa_-_obshchee"},{"name":"Сужение диапазона множества типов на основе типа данных","path":"Sujenie_diapazona_mnojestva_tipov_na_osnove_tipa_dannyh"},{"name":"Сужение диапазона множества типов на основе признаков присущих типу Tagged Union","path":"Sujenie_diapazona_mnojestva_tipov_na_osnove_priznakov_prisushchih_tipu_Tagged_Union"},{"name":"Сужение диапазона множества типов на основе доступных членов объекта","path":"Sujenie_diapazona_mnojestva_tipov_na_osnove_dostupnyh_chlenov_obekta"},{"name":"Сужение диапазона множества типов на основе функции, определенной пользователем","path":"Sujenie_diapazona_mnojestva_tipov_na_osnove_funkcii,opredelennoi_polzovatelem"}]},{"name":"Вывод типов","path":"Vyvod_tipov","sections":[{"name":"Вывод типов - общие сведения","path":"Vyvod_tipov_-_obshchie_svedeniya"},{"name":"Вывод примитивных типов","path":"Vyvod_primitivnyh_tipov"},{"name":"Вывод примитивных типов для констант (const) и полей только для чтения (readonly)","path":"Vyvod_primitivnyh_tipov_dlya_konstant_(const)_i_polei_tolko_dlya_chteniya_(readonly)"},{"name":"Вывод объектных типов","path":"Vyvod_obektnyh_tipov"},{"name":"Вывод типа для полей класса на основе инициализации их в конструкторе","path":"Vyvod_tipa_dlya_polei_klassa_na_osnove_inicializacii_ih_v_konstruktore"},{"name":"Вывод объединенных (Union) типов","path":"Vyvod_obedinennyh_(Union)_tipov"},{"name":"Вывод пересечения (Intersection) с дискриминантными полями","path":"Vyvod_peresecheniya_(Intersection)_s_diskriminantnymi_polyami"},{"name":"Вывод типов кортеж (Tuple)","path":"Vyvod_tipov_kortej_(Tuple)"}]},{"name":"Совместимость объектных типов (Compatible Object Types)","path":"Sovmestimost_obektnyh_tipov_(Compatible_Object_Types)","sections":[{"name":"Важно","path":"Vajno"},{"name":"Совместимость объектных типов в TypeScript","path":"Sovmestimost_obektnyh_tipov_v_TypeScript"}]},{"name":"Совместимость функциональных типов (Compatible Function Types)","path":"Sovmestimost_funkcionalnyh_tipov_(Compatible_Function_Types)","sections":[{"name":"Важно","path":"Vajno"},{"name":"Совместимость параметров","path":"Sovmestimost_parametrov"},{"name":"Совместимость возвращаемого значения","path":"Sovmestimost_vozvrashchaemogo_znacheniya"}]},{"name":"Совместимость объединений (Union Types)","path":"Sovmestimost_obedinenii_(Union_Types)","sections":[{"name":"Совместимость","path":"Sovmestimost"}]},{"name":"Типизация в TypeScript","path":"Tipizaciya_v_TypeScript","sections":[{"name":"Общие сведения","path":"Obshchie_svedeniya"},{"name":"Статическая типизация (static typing)","path":"Staticheskaya_tipizaciya_(static_typing)"},{"name":"Сильная типизация (strongly typed)","path":"Silnaya_tipizaciya_(strongly_typed)"},{"name":"Явно типизированный (explicit typing) с выводом типов (type inference)","path":"Yavno_tipizirovannyi_(explicit_typing)_s_vyvodom_tipov_(type_inference)"},{"name":"Совместимость типов (Type Compatibility), структурная типизация (structural typing)","path":"Sovmestimost_tipov_(Type_Compatibility),strukturnaya_tipizaciya_(structural_typing)"},{"name":"Вариантность (variance)","path":"Variantnost_(variance)"},{"name":"Наилучший общий тип (Best common type)","path":"Nailuchshii_obshchii_tip_(Best_common_type)"},{"name":"Контекстный тип (Contextual Type)","path":"Kontekstnyi_tip_(Contextual_Type)"}]},{"name":"Оператор keyof, Lookup Types, Mapped Types, Mapped Types - префиксы + и -","path":"Operator_keyof,Lookup_Types,Mapped_Types,Mapped_Types_-_prefiksy_+_i_-","sections":[{"name":"Запрос ключей keyof","path":"Zapros_kluchei_keyof"},{"name":"Поиск типов (Lookup Types)","path":"Poisk_tipov_(Lookup_Types)"},{"name":"Сопоставление типов (Mapped Types)","path":"Sopostavlenie_tipov_(Mapped_Types)"},{"name":"Префиксы + и - в сопоставленных типах","path":"Prefiksy_+_i_-_v_sopostavlennyh_tipah"}]},{"name":"Условные типы (Conditional Types)","path":"Uslovnye_tipy_(Conditional_Types)","sections":[{"name":"Условные типы на практике","path":"Uslovnye_tipy_na_praktike"},{"name":"Распределительные условные типы (Distributive Conditional Types)","path":"Raspredelitelnye_uslovnye_tipy_(Distributive_Conditional_Types)"},{"name":"Вывод типов в условном типе","path":"Vyvod_tipov_v_uslovnom_tipe"}]},{"name":"Readonly, Partial, Required, Pick, Record","path":"Readonly,Partial,Required,Pick,Record","sections":[{"name":"Readonly<T> (сделать члены объекта только для чтения)","path":"Readonly<T>_(sdelat_chleny_obekta_tolko_dlya_chteniya)"},{"name":"Partial<T> (сделать все члены объекта необязательными)","path":"Partial<T>_(sdelat_vse_chleny_obekta_neobyazatelnymi)"},{"name":"Required<T> (сделать все необязательные члены обязательными)","path":"Required<T>_(sdelat_vse_neobyazatelnye_chleny_obyazatelnymi)"},{"name":"Pick (отфильтровать объектный тип)","path":"Pick_(otfiltrovat_obektnyi_tip)"},{"name":"Record<K, T> (динамически определить поле в объектном типе)","path":"Record<K,T>_(dinamicheski_opredelit_pole_v_obektnom_tipe)"}]},{"name":"Exclude, Extract, NonNullable, ReturnType, InstanceType, Omit","path":"Exclude,Extract,NonNullable,ReturnType,InstanceType,Omit","sections":[{"name":"Exclude<T, U> (исключает из T признаки присущие U)","path":"Exclude<T,U>_(iskluchaet_iz_T_priznaki_prisushchie_U)"},{"name":"Extract<T, U> (общие для двух типов признаки)","path":"Extract<T,U>_(obshchie_dlya_dvuh_tipov_priznaki)"},{"name":"NonNullable<T> (удаляет типы null и undefined)","path":"NonNullable<T>_(udalyaet_tipy_null_i_undefined)"},{"name":"ReturnType<T> (получить тип значения возвращаемого функцией)","path":"ReturnType<T>_(poluchit_tip_znacheniya_vozvrashchaemogo_funkciei)"},{"name":"InstanceType<T> (получить через тип класса тип его экземпляра)","path":"InstanceType<T>_(poluchit_cherez_tip_klassa_tip_ego_ekzemplyara)"},{"name":"Parameters<T> (получить тип размеченного кортежа описывающий параметры функционального типа)","path":"Parameters<T>_(poluchit_tip_razmechennogo_korteja_opisyvaushchii_parametry_funkcionalnogo_tipa)"},{"name":"ConstructorParameters<T> (получить через тип класса размеченный кортеж описывающий параметры его конструктора)","path":"ConstructorParameters<T>_(poluchit_cherez_tip_klassa_razmechennyi_kortej_opisyvaushchii_parametry_ego_konstruktora)"},{"name":"Omit<T, K> (исключить из T признаки ассоциированными с ключами перечисленных множеством K)","path":"Omit<T,K>_(iskluchit_iz_T_priznaki_associirovannymi_s_kluchami_perechislennyh_mnojestvom_K)"}]},{"name":"Массивоподобные readonly типы, ReadonlyArray, ReadonlyMap, ReadonlySet","path":"Massivopodobnye_readonly_tipy,ReadonlyArray,ReadonlyMap,ReadonlySet","sections":[{"name":"Массивоподобные readonly типы (модифицировать непосредственно в аннотации типа)","path":"Massivopodobnye_readonly_tipy_(modificirovat_neposredstvenno_v_annotacii_tipa)"},{"name":"ReadonlyArray<T> (неизменяемый массив)","path":"ReadonlyArray<T>_(neizmenyaemyi_massiv)"},{"name":"ReadonlyMap<K, V> (неизменяемая карта)","path":"ReadonlyMap<K,V>_(neizmenyaemaya_karta)"},{"name":"ReadonlySet<T> (неизменяемое множество)","path":"ReadonlySet<T>_(neizmenyaemoe_mnojestvo)"}]},{"name":"Синтаксические конструкции и операторы","path":"Sintaksicheskie_konstrukcii_i_operatory","sections":[{"name":"Операторы присваивания короткого замыкания (&&=, ||=, &&=)","path":"Operatory_prisvaivaniya_korotkogo_zamykaniya_(&&=,||=,&&=)"},{"name":"Операнды для delete должны быть необязательными","path":"Operandy_dlya_delete_doljny_byt_neobyazatelnymi"},{"name":"Объявление переменных 'необязательными' при деструктуризации массивоподобных объектов","path":"Obyavlenie_peremennyh_'neobyazatelnymi'_pri_destrukturizacii_massivopodobnyh_obektov"},{"name":"Модификатор abstract для описания типа конструктора","path":"Modifikator_abstract_dlya_opisaniya_tipa_konstruktora"}]},{"name":"Типизированный React","path":"Tipizirovannyi_React","sections":[{"name":"Расширение .tsx","path":"Rasshirenie_.tsx"}]},{"name":"Функциональные компоненты","path":"Funkcionalnye_komponenty","sections":[{"name":"Определение компонента как Function Declaration","path":"Opredelenie_komponenta_kak_Function_Declaration"},{"name":"Определение компонента как Function Expression","path":"Opredelenie_komponenta_kak_Function_Expression"}]},{"name":"Классовые компоненты","path":"Klassovye_komponenty","sections":[{"name":"Производные от Component<P, S, SS>","path":"Proizvodnye_ot_Component<P,S,SS>"},{"name":"Производные от PureComponent<Props, State, Snapshot>","path":"Proizvodnye_ot_PureComponent<Props,State,Snapshot>"}]},{"name":"Универсальные компоненты","path":"Universalnye_komponenty","sections":[{"name":"Обобщенные компоненты (Generics Component)","path":"Obobshchennye_komponenty_(Generics_Component)"}]},{"name":"Типизированные хуки","path":"Tipizirovannye_huki","sections":[{"name":"Предопределенные хуки - useState<T>()","path":"Predopredelennye_huki_-_useState<T>()"},{"name":"Предопределенные хуки - useEffect() и useLayoutEffect()","path":"Predopredelennye_huki_-_useEffect()_i_useLayoutEffect()"},{"name":"Предопределенные хуки - useContext<T>()","path":"Predopredelennye_huki_-_useContext<T>()"},{"name":"Предопределенные хуки - useReducer<R>()","path":"Predopredelennye_huki_-_useReducer<R>()"},{"name":"Предопределенные хуки - useCallback<T>()","path":"Predopredelennye_huki_-_useCallback<T>()"},{"name":"Предопределенные хуки - useRef<T>()","path":"Predopredelennye_huki_-_useRef<T>()"},{"name":"Предопределенные хуки - useImperativeHandle<T, R>()","path":"Predopredelennye_huki_-_useImperativeHandle<T,R>()"},{"name":"Предопределенные хуки - useMemo<T>()","path":"Predopredelennye_huki_-_useMemo<T>()"},{"name":"Предопределенные хуки - useDebugValue<T>()","path":"Predopredelennye_huki_-_useDebugValue<T>()"},{"name":"Пользовательский хук","path":"Polzovatelskii_huk"}]},{"name":"Контекст (Context)","path":"Kontekst_(Context)","sections":[{"name":"Определение контекста","path":"Opredelenie_konteksta"}]},{"name":"HOC (Higher-Order Components)","path":"HOC_(Higher-Order_Components)","sections":[{"name":"Определение hoc","path":"Opredelenie_hoc"},{"name":"Определение hoc на основе функционального компонента","path":"Opredelenie_hoc_na_osnove_funkcionalnogo_komponenta"},{"name":"Определение hoc на основе классового компонента","path":"Opredelenie_hoc_na_osnove_klassovogo_komponenta"}]},{"name":"Пространства имен (namespace) и модули (module)","path":"Prostranstva_imen_(namespace)_i_moduli_(module)","sections":[{"name":"Namespace и module — предназначение","path":"Namespace_i_module_—_prednaznachenie"},{"name":"Namespace - определение","path":"Namespace_-_opredelenie"},{"name":"Модули (export, import) — определение","path":"Moduli_(export,import)_—_opredelenie"},{"name":"Конфигурирование проекта","path":"Konfigurirovanie_proekta"}]},{"name":"Настройка рабочего окружения","path":"Nastroika_rabochego_okrujeniya","sections":[{"name":"Настройка рабочего окружения","path":"Nastroika_rabochego_okrujeniya"},{"name":"Сборка проекта с помощью tsc (TypeScript compiler)","path":"Sborka_proekta_s_pomoshchu_tsc_(TypeScript_compiler)"}]},{"name":"Сборка с использованием ссылок на проекты","path":"Sborka_s_ispolzovaniem_ssylok_na_proekty","sections":[{"name":"Ссылки на проекты","path":"Ssylki_na_proekty"}]},{"name":"Декларации","path":"Deklaracii","sections":[{"name":"Что такое декларация (Declaration)","path":"Chto_takoe_deklaraciya_(Declaration)"},{"name":"Установка деклараций с помощью @types","path":"Ustanovka_deklaracii_s_pomoshchu_@types"},{"name":"Подготовка к созданию декларации","path":"Podgotovka_k_sozdaniu_deklaracii"},{"name":"Разновидности деклараций","path":"Raznovidnosti_deklaracii"},{"name":"Декларации и область видимости","path":"Deklaracii_i_oblast_vidimosti"},{"name":"Декларации для библиотек с одной точкой входа","path":"Deklaracii_dlya_bibliotek_s_odnoi_tochkoi_vhoda"},{"name":"Декларации для библиотек с множеством точек входа","path":"Deklaracii_dlya_bibliotek_s_mnojestvom_tochek_vhoda"},{"name":"Создание деклараций вручную","path":"Sozdanie_deklaracii_vruchnuu"},{"name":"Директива с тройным слешем (triple-slash directives)","path":"Direktiva_s_troinym_sleshem_(triple-slash_directives)"},{"name":"Импортирование декларации (import)","path":"Importirovanie_deklaracii_(import)"}]},{"name":"Публикация TypeScript","path":"Publikaciya_TypeScript","sections":[{"name":"Публикация","path":"Publikaciya"}]},{"name":"Опции компилятора","path":"Opcii_kompilyatora","sections":[{"name":"strict","path":"strict"},{"name":"suppressExcessPropertyErrors","path":"suppressExcessPropertyErrors"},{"name":"suppressImplicitAnyIndexErrors","path":"suppressImplicitAnyIndexErrors"},{"name":"noImplicitAny","path":"noImplicitAny"},{"name":"checkJs","path":"checkJs"},{"name":"JSX","path":"JSX"},{"name":"jsxFactory","path":"jsxFactory"},{"name":"target (t)","path":"target_(t)"},{"name":"extends","path":"extends"},{"name":"alwaysStrict","path":"alwaysStrict"},{"name":"strictNullChecks","path":"strictNullChecks"},{"name":"stripInternal","path":"stripInternal"},{"name":"noImplicitThis","path":"noImplicitThis"},{"name":"noImplicitUseStrict","path":"noImplicitUseStrict"},{"name":"baseUrl","path":"baseUrl"},{"name":"paths","path":"paths"},{"name":"rootDir","path":"rootDir"},{"name":"rootDirs","path":"rootDirs"},{"name":"traceResolution","path":"traceResolution"},{"name":"lib","path":"lib"},{"name":"noLib","path":"noLib"},{"name":"noResolve","path":"noResolve"},{"name":"noStrictGenericChecks","path":"noStrictGenericChecks"},{"name":"preserveConstEnums","path":"preserveConstEnums"},{"name":"removeComments","path":"removeComments"},{"name":"noUnusedLocals","path":"noUnusedLocals"},{"name":"noUnusedParameters","path":"noUnusedParameters"},{"name":"skipLibCheck","path":"skipLibCheck"},{"name":"declarationDir","path":"declarationDir"},{"name":"types","path":"types"},{"name":"typeRoots","path":"typeRoots"},{"name":"allowUnusedLabels","path":"allowUnusedLabels"},{"name":"noImplicitReturns","path":"noImplicitReturns"},{"name":"noFallthroughCasesInSwitch","path":"noFallthroughCasesInSwitch"},{"name":"outFile","path":"outFile"},{"name":"allowSyntheticDefaultImports","path":"allowSyntheticDefaultImports"},{"name":"allowUnreachableCode","path":"allowUnreachableCode"},{"name":"allowJs","path":"allowJs"},{"name":"reactNamespace","path":"reactNamespace"},{"name":"pretty","path":"pretty"},{"name":"moduleResolution","path":"moduleResolution"},{"name":"exclude","path":"exclude"},{"name":"noEmitHelpers","path":"noEmitHelpers"},{"name":"newLine","path":"newLine"},{"name":"inlineSourceMap","path":"inlineSourceMap"},{"name":"inlineSources","path":"inlineSources"},{"name":"noEmitOnError","path":"noEmitOnError"},{"name":"noEmit","path":"noEmit"},{"name":"charset","path":"charset"},{"name":"diagnostics","path":"diagnostics"},{"name":"declaration","path":"declaration"},{"name":"downlevelIteration","path":"downlevelIteration"},{"name":"emitBOM","path":"emitBOM"},{"name":"emitDecoratorMetadata","path":"emitDecoratorMetadata"},{"name":"forceConsistentCasingInFileNames","path":"forceConsistentCasingInFileNames"},{"name":"help (h)","path":"help_(h)"},{"name":"importHelpers","path":"importHelpers"},{"name":"isolatedModules","path":"isolatedModules"},{"name":"listEmittedFiles","path":"listEmittedFiles"},{"name":"listFiles","path":"listFiles"},{"name":"sourceRoot","path":"sourceRoot"},{"name":"mapRoot","path":"mapRoot"},{"name":"maxNodeModuleJsDepth","path":"maxNodeModuleJsDepth"},{"name":"project (p)","path":"project_(p)"},{"name":"init","path":"init"},{"name":"version (v)","path":"version_(v)"},{"name":"watch (w)","path":"watch_(w)"},{"name":"preserveSymlinks","path":"preserveSymlinks"},{"name":"strictFunctionTypes","path":"strictFunctionTypes"},{"name":"locale","path":"locale"},{"name":"strictPropertyInitialization","path":"strictPropertyInitialization"},{"name":"esModuleInterop","path":"esModuleInterop"},{"name":"emitDeclarationsOnly","path":"emitDeclarationsOnly"},{"name":"resolveJsonModule","path":"resolveJsonModule"},{"name":"declarationMap","path":"declarationMap"},{"name":"strictBindCallApply","path":"strictBindCallApply"},{"name":"showConfig","path":"showConfig"},{"name":"build","path":"build"},{"name":"verbose","path":"verbose"},{"name":"dry","path":"dry"},{"name":"clean","path":"clean"},{"name":"force","path":"force"},{"name":"incremental","path":"incremental"},{"name":"tsBuildInfoFile","path":"tsBuildInfoFile"},{"name":"allowUmdGlobalAccess","path":"allowUmdGlobalAccess"},{"name":"disableSourceOfProjectReferenceRedirect","path":"disableSourceOfProjectReferenceRedirect"},{"name":"useDefineForClassFields","path":"useDefineForClassFields"},{"name":"importsNotUsedAsValues","path":"importsNotUsedAsValues"},{"name":"assumeChangesOnlyAffectDirectDependencies","path":"assumeChangesOnlyAffectDirectDependencies"},{"name":"watchFile","path":"watchFile"},{"name":"watchDirectory","path":"watchDirectory"},{"name":"fallbackPolling","path":"fallbackPolling"},{"name":"synchronousWatchDirectory","path":"synchronousWatchDirectory"},{"name":"noUncheckedIndexedAccess","path":"noUncheckedIndexedAccess"},{"name":"noPropertyAccessFromIndexSignature","path":"noPropertyAccessFromIndexSignature"},{"name":"explainFiles","path":"explainFiles"}]}]}},"staticQueryHashes":["408059355","63159454"]}