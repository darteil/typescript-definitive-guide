{"componentChunkName":"component---src-page-templates-what-is-new-page-what-is-new-page-provider-tsx","path":"/what-is-new/4.3","result":{"pageContext":{"localization":{"lang":"ru","title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи.","appNavigation":[{"id":"index","path":"/","name":"Главная"},{"id":"book-contents","path":"/book/chapters","name":"Оглавление"},{"id":"what-is-new-contents","path":"/what-is-new","name":"Что нового?"},{"id":"pdf","path":"/pdf","name":"PDF Версия"}],"notification":{"behaviorNotification":{"copyLink":"Ссылка скопирована!"}},"layouts":{"shared":{"informers":{"donateInformer":{"minBanner":{"label":"Хочешь поддержать проект финансово?","buttons":{"yes":"Да, хочу! Узнать подробнее...","no":"Нет. Закрыть окно."}},"maxBanner":{"html":{"__html":"Чтобы <b>контент</b> приносил <b>максимальную пользу</b> его <b>необходимо</b> постоянно <b>совершенствовать</b> и <b>адаптировать</b>\n        под каждую новую версию <i>TypeScript</i>. Это отнимает <b>много времени</b> и без Вашей, даже <b>незначительно\n        финансовой</b>, поддержки практически <b>невозможно</b>. Помогая проекту вы прежде всего принимаете <b>участие</b> в\n        <b>развитии</b> профессионального уровня ваших <b>друзей</b>, <b>коллег</b>, <b>подчиненных</b>. Выпусти желание\n        сделать свой мир лучше. <b>Сделай контент для будущих специалистов ещё качественней и доступней!</b>"},"href":"#"}},"watchWithTelegramInformer":{"text":["Хочешь поддерживать свои знания в актуальном состоянии?","Тогда подписывайся на Telegram канал и узнавай обо всех изменениях!"],"subscribeButton":{"label":"Подписаться"}},"contentLevelUpInformer":{"text":"Кажется непонятным и слишком сложным? Чего-то не хватает? Расскажи об этом! Помоги сделать контент более доступным для следующих поколений!","buttons":[{"label":"Сообщить на Github","href":""}]}},"links":{"telegram":"#"},"appContent":{"contentNav":{"prevButton":{"label":"Назад"},"nextButton":{"label":"Вперед"}}},"appHeader":{"navToggleButton":{"tooltips":{"open":["Открыть боковое","меню"],"close":["Закрыть боковое","меню"]}},"appMenu":{"pdfButton":{"href":"#","tooltip":["Скачать","PDF версию"],"label":"Скачать PDF версию"},"telegramButton":{"href":"https://t.me/nauchikus","tooltip":["Следить за","изменениями в","Telegram"],"label":"Следить за изменениями в Telegram"},"githubButton":{"href":"https://github.com/nauchikus/typescript-definitive-guide","tooltip":["Посетить проект на","Github"],"label":"Посетить проект на Github"}},"donateDropdown":{"href":"https://yasobe.ru/na/typescript_definitive_guide","toggleButton":{"label":["Поддержать","финансово"]},"content":{"title":"Сделай контент для будущих поколений ещё качественней и доступней!","subtitle":{"__html":"Контент требует постоянного совершенствования и адаптации под каждую новую версию\nязыка TypeScript.\nЭто отнимает много времени и без Вашей, даже незначительно финансовой, поддержки практически\nневозможно.\nПрими участие в развитии профессионального уровня своих друзей, коллег, подчиненных. Встань на\nсторону небезразличных!"}}},"appSearch":{"inputPlaceholder":"Я ищу...","submitButton":{"ariaLabel":"Отправить"}}},"pdf":{"downloadPdfBookButton":{"title":"Скачать PDF Версию","href":"pdf/TypeScript Подробное Руководство.pdf"}}}},"pages":{"index":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"appDescription":"Книга и документация в одном","subtitleAll":["TypeScript в деталях","TypeScript крупным планом","TypeScript под микроскопом","TypeScript со всех сторон"]}},"book__chapters":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"tocItem":{"copyLinkToBufferButton":{"tooltip":"Скопировать ссылку в буфер обмена"},"collapseTocButton":{"tooltip":{"openState":"Открыть","closeState":"Закрыть"}}},"secondaryContentBar":{"label":"Оглавление","tocFilterButton":{"tooltip":"Отфильтровать на основе разделов"},"tocCollapseAllButton":{"tooltip":{"openState":"Раскрыть все","closeState":"Закрыть все"}}},"asideLayout":{"tagBarLabel":"Тематические разделы","tagBar":{"cleanFilterButton":"Все разделы"}}}},"book__chapter":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"secondaryContentBar":{"editOnGithubButton":{"tooltip":"Редактировать на Github"}}}},"what-is-new__toc":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"primaryContentBar":{"label":"История нововведений"},"tocItem":{"copyLinkToBufferButton":{"tooltip":"Скопировать ссылку в буфер обмена"}}}},"not-found":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"notFound_404":{"status":"404","title":"Страница не найдена :("}}},"pdf":{"metadata":{"title":"TypeScript - в деталях","description":"Бесплатная pdf книга на русском по языку TypeScript."},"gui":{"title":"TypeScript Подробное Руководство","subtitle":"PDF Версия"}}}},"innovationData":{"versionMMP":"4.3","releaseHistory":[{"version":"4.3@beta","dateRelease":"April 1, 2021","datePublication":"April 6, 2021"}],"colors":{"bookCoverColors":{"--color_light":"#fff","--color_middle-lite":"#c93737","--color_accent":"#e6e63a","--color_ambient":"#ff9443"},"bookUpdateCurrentVersionCoverColors":{"--color":"#265589"}},"mmp":"4.3","innovations":[{"mmp":"4.3","id":"","version":"4.2","innovationName":"Отдельные типы аксеcсоров","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Улучшение"],"path":"Otdelnye_tipy_aksecsorov","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"Otdelnye_tipy_aksecsorov\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Отдельные типы аксеcсоров</span></h2>\n<div class=\"content__tag-bar\"><span class=\"content__tag-bar-tag content__tag-bar-tag_default\">Улучшение</span></div>\n<p class=\"content__paragraph\">Автоматическое преобразование типов в <em>JavaScript</em> сокращает время, но мешает <em>TypeScript</em> повысить его типобезопасность. Нередко можно встретить код, в котором предполагается, что геттер принадлежит к типу <code>number</code>, в то время как сеттер ожидает значение принадлежащее к любому типу, а соответствие производится за счет преобразования.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_js\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">js</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> _value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Предполагается, что геттер value возвращает тип number.\n     */</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Предполагается, что сеттер может обрабатывать\n     * сценарии работы с любым типом.\n     * \n     * [0] преобразовываем value к типу number. Это необходимо,\n     * посколькуможет оно может принадлежать к любому типу.\n     * \n     * [1] Если значение convertedValue не способно быть преобразовано,\n     * то прекращаем выполнение кода сеттера...\n     * \n     * [2] ...иначе, присваиваем его приватному полю _value.\n     */</span>\n    <span class=\"token keyword\">set</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> convertedValue <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0]</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span>convertedValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// [1]</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2]</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_value <span class=\"token operator\">=</span> convertedValue<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [3]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_js\"></div>\n</div>\n<p class=\"content__paragraph\">Но в <em>TypeScript</em> невозможно реализовать подобный сценарий, поскольку значение устанавливаемое сеттеру должно соответствовать типу значения возвращаемому геттером.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Ok</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> _value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">get</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * [*] Ok\n     */</span>\n    <span class=\"token keyword\">set</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// [*]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Error</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> _value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">get</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * [*] Error -> 'get' and 'set' accessor must have the same type.ts(2380)\n     */</span>\n    <span class=\"token keyword\">set</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// *</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Поэтому начиная с текущей версии, данное поведение было изменено. Теперь, тип значения устанавливаемого сеттеру может отличаться от типа значения возвращаемого геттером, который и определяет тип аксессоров. Другими словами, компилятор вычисляет совместимость типов на основе геттеров.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Начиная с текущей версии..</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> _value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">get</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * [*] Ok\n     */</span>\n    <span class=\"token keyword\">set</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// *</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Единственный неочивидный момент заключается в том, что определение типа значения сеттера обязано включать тип к которому принадлежит значение возвращаемое геттером.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> _value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * [*] Error -> The return type of a 'get' accessor must be assignable to its 'set' accessor typets(2380)\n     */</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// [*]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Сеттер не включает тип возвращаемый геттером.\n     */</span>\n    <span class=\"token keyword\">set</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","commitInfoAll":[{"committedDate":"2021-04-06T12:50:19Z","message":"win(исправление): fixed spelling\n\nfixed spelling","messageHeadline":"win(исправление): fixed spelling","pushedDate":"2021-04-06T12:53:41Z","authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/4.3/Отдельные типы аксеcсоров/content.md"},{"mmp":"4.3","id":"","version":"4.2","innovationName":"Модификатор override и флаг --noImplicitOverride","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Нововведение"],"path":"Modifikator_override_i_flag_--noImplicitOverride","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"Modifikator_override_i_flag_--noImplicitOverride\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Модификатор override и флаг --noImplicitOverride</span></h2>\n<div class=\"content__tag-bar\"><span class=\"content__tag-bar-tag content__tag-bar-tag_new\">Нововведение</span></div>\n<p class=\"content__paragraph\">Представьте случай переопределения подклассом некоторых методов своего суперкласса.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * [*] Определяет метод\n     */</span>\n    <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// [*]</span>\n    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token comment\">// [*]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * [*] Переопределяет методы своего суперкласса.\n     */</span>\n    <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// [*]</span>\n    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// [*]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Но что, если над проектом работает большое количество команд находящихся в разных уголках земного шара и вдруг, разработчики <code>SuperClass</code>, решили изменить его <em>api</em> удалив оба метода? В таком случае, разработчики класса <code>SubClass</code> даже не узнают об этом, поскольку <em>переопределение</em> превратится в <em>определение</em>. Другими словами, компилятор даже глазом не моргнет, поскольку ему будет казаться, что класс <code>SubClass</code> определят методы <code>a()</code> и <code>b()</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Удалили a() и b() и добавили c().\n     */</span>\n    <span class=\"token function\">с</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Ошибки не возникает, так как компилятор считает\n     * что данный класс определяет оба метода.\n     */</span>\n    <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Для предотвращения подобных сценариев был добавлен модификатор <code>override</code>, который одназначно указывает на переопределение методов родительского класса. При использовании модификатора <code>override</code>, компилятор сможет понять, что происходит переопределение несуществующих в суперклассе методов и сообщить об этом с помощью ошибки.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Удалили a() и b() и добавили c().\n     */</span>\n    <span class=\"token function\">с</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * [*] Error -> \n     * This member cannot have an 'override' modifier\n     * because it is not declared in the base class 'SuperClass'.ts(4113)\n     * \n     * Теперь компилятор понимает, что происходи переопределение\n     * несуществующих методов.\n     */</span>\n    override <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// [*]</span>\n    override <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// [*]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">А во избежание <em>затираний</em> возникающих в случаях определения суперклассом методов уже определенных в его потомках, был введен новый флаг компилятора <code>--noImplicitOverride</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * [0] метод определенный только в SubClass\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// [0]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [1] Но спустя некоторое время класс SuperClass\n * определяет метод b(), который уже существует в\n * классе-потомке [2]. Другими словами, произошло\n * нежелаемое переопределение способное привести\n * к непредсказуемому поведению программы.\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// [1]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// [2]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">При активации флага <code>--noImplicitOverride</code>, в подобных случаях будет возникать ошибка.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * --noImplicitOverride = true\n     * \n     * [*] Error -> This member must have an 'override'\n     * modifier because it overrides a member in the base\n     * class 'SuperClass'.ts(4114)\n     */</span>\n    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// [*]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","commitInfoAll":[{"committedDate":"2021-04-06T08:00:49Z","message":"win(добавление): add v4.3@beta\n\nadd v4.3@beta","messageHeadline":"win(добавление): add v4.3@beta","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/4.3/Модификатор override и флаг --noImplicitOverride/content.md"},{"mmp":"4.3","id":"","version":"4.2","innovationName":"Улучшение работы шаблонного строкового типа","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Улучшение"],"path":"Uluchshenie_raboty_shablonnogo_strokovogo_tipa","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"Uluchshenie_raboty_shablonnogo_strokovogo_tipa\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Улучшение работы шаблонного строкового типа</span></h2>\n<div class=\"content__tag-bar\"><span class=\"content__tag-bar-tag content__tag-bar-tag_default\">Улучшение</span></div>\n<p class=\"content__paragraph\">Шаблонный строковой литеральный тип позволяет определять новый тип за счет описания шаблона, который может использовать другие типы.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">SeaFish</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">shark</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">|</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">barracuda</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">RiverFish</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">pike</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">|</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">pike perch</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">FishSoup</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>SeaFish <span class=\"token operator\">|</span> RiverFish<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> fish</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// type FishSoup = \"shark fish\" | \"barracuda fish\" | \"pike fish\" | \"pike perch fish\"</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Кроме того, при установлении совместимости компилятор в состоянии определить совместимость обычных типов, как например <code>number</code> или <code>boolean</code> с их литеральными представителями.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> v0<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token builtin\">number</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token builtin\">number</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token builtin\">number</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> v1<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">1-2-3</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\nv0 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Тем не менее, компилятору не под силу вычисления на основе типа значения.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * [*] Error -> Type 'string' is not assignable to type '`Hello ${string}`'.ts(2322)\n * Хотя компилятор знает тип значения param, он не может расспознать совместимость\n * типа возвращаемого значения с типом указанным в сигнатере функции.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>param<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token builtin\">string</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>param<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [*]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Начиная с текущей версии было добавлено поведение, способное сопоставить тип определяемый значением со строковым шаблонным литеральным типом.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * >=v4.3\n * \n * [*] Ok!\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>param<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token builtin\">string</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>param<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [*]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","commitInfoAll":[{"committedDate":"2021-04-06T08:11:27Z","message":"win(исправление): fixed spelling\n\nfixed spelling","messageHeadline":"win(исправление): fixed spelling","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/4.3/Улучшение работы шаблонного строкового типа/content.md"},{"mmp":"4.3","id":"","version":"4.2","innovationName":"Изменение поведения для объекта Promise в условных выражениях","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Изменение"],"path":"Izmenenie_povedeniya_dlya_obekta_Promise_v_uslovnyh_vyrajeniyah","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"Izmenenie_povedeniya_dlya_obekta_Promise_v_uslovnyh_vyrajeniyah\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Изменение поведения для объекта Promise в условных выражениях</span></h2>\n<div class=\"content__tag-bar\"><span class=\"content__tag-bar-tag content__tag-bar-tag_change\">Изменение</span></div>\n<p class=\"content__paragraph\">Представьте ситуацию, в которой ход выполнения программы зависит от существования объекта <code>Promise</code>. Существование объекта осуществляется при помощи одно из множества возможных условных выражений.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * Фабрика возвращающая объект обещания.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Действие, логика которого зависит от существования\n * объекта Promise.\n */</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Если объект обещания существует, то выполняем \n     * некоторые действия. \n     */</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Но что, если по условию, в условном выражении требуется проверить не существование объекта <code>Promise</code>, а результат его выполнения. К тому, обещание является возвращаемым значением асинхронной функции являющейся асинхронным валидатором. Если разработчик упустит из внимания факт асинхронности валидатора, то в приложении появится трудновыявляемая ошибка, поскольку без ключевого слова <code>await</code> в условном выражении проверяться будет не результат разрешения обещания, а существование его объекта.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * [0] Асинхронный валидатор\n */</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// [0]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">/**\n * [1] Асинхронное действие результат выполнения которого\n * зависит от асинхронного валидатора.[2] Но несмотря на то, что\n * результатом выполнения функции validate() является значение flase,\n * выполнение программы все равно зайдет в блок if поскольку\n * валидатор, по невнимательности, был вызван без ключевого слова await.\n * \n */</span> \n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * --strictNullChecks = true\n     * \n     * До текущей версии - Ok, поскольку компилятор проверяет существоание объекта Promise.\n     * Начиная с текущей версии - Error.\n     * \n     * This condition will always return true since this 'Promise&lt;boolean>' appears to always be defined.ts(2801)\n     */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// [2]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Поэтому, начиная с текущей версии, при активном флаге <code>--strictNullChecks</code> обещания в условных выражениях необходимо конкретизировать. Проверки на существование объекта <code>Promise</code> теперь необходимо выполнять явно.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// [0]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * --strictNullChecks = true\n     */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n\n    <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Подобное поведение не допустит непредсказуемого поведения тогда, когда в условном выражении предполагается работа со значением являющимся результатом разрешения обещания, а не его объектом.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * --strictNullChecks = true\n     */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">await</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n\n    <span class=\"token keyword\">await</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Единственное о чем ещё стоет упомянуть, что на данный момент, по неизвестной причине, в условном выражении <em>ИЛИ</em> (<code>||</code>), при отсутствии ключевого слова <code>await</code> ошибка не возникает.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","commitInfoAll":[{"committedDate":"2021-04-06T08:11:27Z","message":"win(исправление): fixed spelling\n\nfixed spelling","messageHeadline":"win(исправление): fixed spelling","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/4.3/Изменение поведения для объекта Promise в условных выражениях/content.md"},{"mmp":"4.3","id":"","version":"4.2","innovationName":"Индексные сигнатуры класса","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Улучшение"],"path":"Indeksnye_signatury_klassa","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"Indeksnye_signatury_klassa\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Индексные сигнатуры класса</span></h2>\n<div class=\"content__tag-bar\"><span class=\"content__tag-bar-tag content__tag-bar-tag_default\">Улучшение</span></div>\n<p class=\"content__paragraph\">До этого момента индексные сигнатуры являлись исключительно членами экземпляра класса.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Инжексная сигнатура принадлежащая\n     * экземпляру класса.\n     */</span>\n    <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninstance<span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'🍨'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// динамическое объявление </span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Начиная с текущей версии индексные сигнатуры также можно определять на уровне самого класса (<code>static</code>).</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Индексная сигнатура принадлежащая\n     * классу.\n     */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'🍨'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// динамическое объявление </span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Правила для статических индексных сигнатур аналогичны правилам индексных сигнатур экземпляра класса.</p>","commitInfoAll":[{"committedDate":"2021-04-06T08:11:27Z","message":"win(исправление): fixed spelling\n\nfixed spelling","messageHeadline":"win(исправление): fixed spelling","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/4.3/Индексные сигнатуры класса/content.md"},{"mmp":"4.3","id":"","version":"4.2","innovationName":"Расширение возможностей ECMAScript приватного модификатора и флаг --useDefineForClassFields","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Улучшение"],"path":"Rasshirenie_vozmojnostei_ECMAScript_privatnogo_modifikatora_i_flag_--useDefineForClassFields","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"Rasshirenie_vozmojnostei_ECMAScript_privatnogo_modifikatora_i_flag_--useDefineForClassFields\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Расширение возможностей ECMAScript приватного модификатора и флаг --useDefineForClassFields</span></h2>\n<div class=\"content__tag-bar\"><span class=\"content__tag-bar-tag content__tag-bar-tag_default\">Улучшение</span></div>\n<p class=\"content__paragraph\">До текущего момента <em>TypeScript</em> позволял применять нативный <em>ECMAScript</em> модификатор доступа <code>private</code> (<code>#</code>) только к полям экземпляра.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * >=v4.3\n * \n * [*] Error!\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/** члены класса */</span>\n\n    <span class=\"token keyword\">static</span> #<span class=\"token constant\">CLASS_FIELD</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [*]</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">#classProp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// [*]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">.</span>#<span class=\"token constant\">CLASS_FIELD</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">set</span> <span class=\"token function\">#classProp</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// [*]</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">static</span> <span class=\"token function\">#classMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// [*]</span>\n\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token comment\">/** члены экземпляра класса */</span>\n\n    #instanceField <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">get</span> <span class=\"token function\">#instanceProp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// [*]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#instanceField<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">set</span> <span class=\"token function\">#instanceProp</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// [*]</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">#instanceMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// [*]</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Начиная с текущей версии, данный модификатор можно применить ко всем членам, как экземпляра, так и класса. Единственный неочевидный момент связан с полями класса, поскольку их модифицирование возможно только при активации нового флага <code>--useDefineForClassFields</code>. </p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * >=v4.3\n * \n * Ok! Но с одной оговоркой. [*] Для\n * разрешения нативных приватных полей класса\n * следует активировать флаг --useDefineForClassFields,\n * иначе возникнет ошибка.\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/** члены класса */</span>\n\n    <span class=\"token keyword\">static</span> #<span class=\"token constant\">CLASS_FIELD</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [*]</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">#classProp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">.</span>#<span class=\"token constant\">CLASS_FIELD</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">set</span> <span class=\"token function\">#classProp</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">static</span> <span class=\"token function\">#classMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token comment\">/** члены экземпляра класса */</span>\n\n    #instanceField <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">get</span> <span class=\"token function\">#instanceProp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#instanceField<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">set</span> <span class=\"token function\">#instanceProp</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">#instanceMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","commitInfoAll":[{"committedDate":"2021-04-06T08:11:27Z","message":"win(исправление): fixed spelling\n\nfixed spelling","messageHeadline":"win(исправление): fixed spelling","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/4.3/Расширение возможностей ECMAScript приватного модификатора и флаг --useDefineForClassFields/content.md"},{"mmp":"4.3","id":"","version":"4.2","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменения в lib.d.ts","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_Izmeneniya_v_lib.d.ts","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"KRITIChESKOE_IZMENENIE_Izmeneniya_v_lib.d.ts\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ Изменения в lib.d.ts</span></h2>\n<div class=\"content__tag-bar\"><span class=\"content__tag-bar-tag content__tag-bar-tag_critical\">Критическое изменение</span></div>\n<p class=\"content__paragraph\">Как и всегда, во имя улучшений, основная библиотека <code>lib.d.ts</code> претерпела множество изменений, большая часть которых пришлась на удаление api <em>Mozila</em> не реализованное ни в одном браузере.\n</p>","commitInfoAll":[{"committedDate":"2021-04-06T08:11:27Z","message":"win(исправление): fixed spelling\n\nfixed spelling","messageHeadline":"win(исправление): fixed spelling","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/4.3/\\[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ\\] Изменения в lib\\.d\\.ts/content.md"},{"mmp":"4.3","id":"","version":"4.2","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Enum больше нельзя сравнивать с произвольными числами","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_Enum_bolshe_nelzya_sravnivat_s_proizvolnymi_chislami","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"KRITIChESKOE_IZMENENIE_Enum_bolshe_nelzya_sravnivat_s_proizvolnymi_chislami\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ Enum больше нельзя сравнивать с произвольными числами</span></h2>\n<div class=\"content__tag-bar\"><span class=\"content__tag-bar-tag content__tag-bar-tag_critical\">Критическое изменение</span></div>\n<p class=\"content__paragraph\">До текущей версии, компилятор позволял логические операции проверки несуществующих индексов <code>Enum</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * До текущей версии.\n */</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token constant\">E</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">B</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token constant\">E</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * [0][1] Ok!\n     * [2] - Несуществующий индекс.\n     */</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// [0]</span>\n\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// [1]</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Начиная с текущей версии, выявление принадлежности к несуществующему индексу будет вызывать ошибку.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * >=v4.3\n */</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token constant\">E</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">B</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token constant\">E</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * [0] Ok!\n     * [1] Error ->\n     * This condition will always return 'false' since the types 'E' and '2' have no overlap.ts(2367)\n     */</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// [0]</span>\n\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// [1]</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","commitInfoAll":[{"committedDate":"2021-04-06T08:00:49Z","message":"win(добавление): add v4.3@beta\n\nadd v4.3@beta","messageHeadline":"win(добавление): add v4.3@beta","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/4.3/\\[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ\\] Enum больше нельзя сравнивать с произвольными числами/content.md"}]},"winTocTree":[{"id":"0","isCollapse":false,"index":0,"data":{"releaseHistory":[{"version":"3.3","dateRelease":"january 31, 2019"}],"mmp":"3.3","innovations":[{"id":"","version":"3.3","innovationName":"Повышение производительности сборки для команды --build --watch","dateRelease":"January 31, 2019","datePublication":"January 31, 2019","tags":[],"path":"Povyshenie_proizvoditelnosti_sborki_dlya_komandy_--build_--watch"},{"id":"","version":"3.3","innovationName":"Улучшение поведения для типов Union указанных в качестве параметров функции","dateRelease":"January 31, 2019","datePublication":"January 31, 2019","tags":[],"path":"Uluchshenie_povedeniya_dlya_tipov_Union_ukazannyh_v_kachestve_parametrov_funkcii"}]}},{"id":"1","isCollapse":false,"index":1,"data":{"releaseHistory":[{"version":"3.4","dateRelease":"March 29, 2019"}],"mmp":"3.4","innovations":[{"id":"","version":"3.4","innovationName":"Опции компилятора --tsBuildInfoFile","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"Opcii_kompilyatora_--tsBuildInfoFile"},{"id":"","version":"3.4","innovationName":"Опции компилятора --incremental","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"Opcii_kompilyatora_--incremental"},{"id":"","version":"3.4","innovationName":"Массивоподобные readonly типы","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"Massivopodobnye_readonly_tipy"},{"id":"","version":"3.4","innovationName":"Расширенный тип ReadonlyArray","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"Rasshirennyi_tip_ReadonlyArray"},{"id":"","version":"3.4","innovationName":"Привидение к константе (const assertion)","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"Prividenie_k_konstante_(const_assertion)"},{"id":"","version":"3.4","innovationName":"Проверка типов для globalThis","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"Proverka_tipov_dlya_globalThis"}]}},{"id":"2","isCollapse":false,"index":2,"data":{"releaseHistory":[{"version":"3.5","dateRelease":"May 29, 2019"}],"mmp":"3.5","innovations":[{"id":"","version":"3.5","innovationName":"Вспомогательный тип Omit","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"Vspomogatelnyi_tip_Omit"},{"id":"","version":"3.5","innovationName":"Улучшение механизма проверки избыточных полей в объединённых типах (Union types)","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"Uluchshenie_mehanizma_proverki_izbytochnyh_polei_v_obedinennyh_tipah_(Union_types)"},{"id":"","version":"3.5","innovationName":"Введение нового флага --allowUmdGlobalAccess","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"Vvedenie_novogo_flaga_--allowUmdGlobalAccess"},{"id":"","version":"3.5","innovationName":"Улучшение механизма проверки объединенных типов","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"Uluchshenie_mehanizma_proverki_obedinennyh_tipov"},{"id":"","version":"3.5","innovationName":"Улучшение механизма вывода типа высшего порядка для обобщенных конструкторов","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"Uluchshenie_mehanizma_vyvoda_tipa_vysshego_poryadka_dlya_obobshchennyh_konstruktorov"},{"id":"","version":"3.5","innovationName":"Неявное ограничение обобщенных параметров типом unknown","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"Neyavnoe_ogranichenie_obobshchennyh_parametrov_tipom_unknown"},{"id":"","version":"3.5","innovationName":"Изменение правил для типа unknown и индексной сигнатуре","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"Izmenenie_pravil_dlya_tipa_unknown_i_indeksnoi_signature"},{"id":"","version":"3.5","innovationName":"Изменение логики для Object.keys для версии es5","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"Izmenenie_logiki_dlya_Object.keys_dlya_versii_es5"}]}},{"id":"3","isCollapse":false,"index":3,"data":{"releaseHistory":[{"version":"3.6","dateRelease":"August 28, 2019"}],"mmp":"3.6","innovations":[{"id":"","version":"3.6","innovationName":"Повышение типобезопасности генераторов","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"Povyshenie_tipobezopasnosti_generatorov"},{"id":"","version":"3.6","innovationName":"Добавление хелпера имитирующего механизм spread array при компиляции в ecmascript ниже версии 6 при неактивном флаге --downlevelIteration","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"Dobavlenie_helpera_imitiruushchego_mehanizm_spread_array_pri_kompilyacii_v_ecmascript_nije_versii_6_pri_neaktivnom_flage_--downlevelIteration"},{"id":"","version":"3.6","innovationName":"Расширение системы типов типами представляющими структуры данных только для чтения","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"Rasshirenie_sistemy_tipov_tipami_predstavlyaushchimi_struktury_dannyh_tolko_dlya_chteniya"},{"id":"","version":"3.6","innovationName":"Строковой идентификатор функции-конструктора","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"Strokovoi_identifikator_funkcii-konstruktora"},{"id":"","version":"3.6","innovationName":"Расширение вывода об ошибках при работе с Promise","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"Rasshirenie_vyvoda_ob_oshibkah_pri_rabote_s_Promise"},{"id":"","version":"3.6","innovationName":"Слияние одноименных классов и функций из окружающего контекста","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"Sliyanie_odnoimennyh_klassov_i_funkcii_iz_okrujaushchego_konteksta"},{"id":"","version":"3.6","innovationName":"Добавлена поддержка Unicode для идентификаторов","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"Dobavlena_podderjka_Unicode_dlya_identifikatorov"},{"id":"","version":"3.6","innovationName":"Поддержка import.meta для SystemJS","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"Podderjka_import.meta_dlya_SystemJS"},{"id":"","version":"3.6","innovationName":"get и set в окружающем контексте","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"get_i_set_v_okrujaushchem_kontekste"},{"id":"","version":"3.6","innovationName":"Api для поддержки --build и --incremental","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"Api_dlya_podderjki_--build_i_--incremental"},{"id":"","version":"3.6","innovationName":"Интеллектуальное определение синтаксиса авто-импорта","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"Intellektualnoe_opredelenie_sintaksisa_avto-importa"}]}},{"id":"4","isCollapse":false,"index":4,"data":{"releaseHistory":[{"version":"3.7","dateRelease":"November 5, 2019"},{"version":"3.7-rc","dateRelease":"November 4, 2019"},{"version":"3.7-beta","dateRelease":"November 3, 2019"},{"version":"3.7-alpha","dateRelease":"November 2, 2019"}],"mmp":"3.7","innovations":[{"id":"","version":"3.7-rc","innovationName":"Оператор опциональной последовательности (?.)","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":["исправление","Критическое изменение","Компилятор"],"path":"Operator_opcionalnoi_posledovatelnosti_(?.)"},{"id":"","version":"3.7-rc","innovationName":"Оператор объединения со значением null (??)","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":["высокая ожидаемость"],"path":"Operator_obedineniya_so_znacheniem_null_(??)"},{"id":"","version":"3.7-rc","innovationName":"Утверждение в сигнатуре (Signature Assertion)","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":["важно"],"path":"Utverjdenie_v_signature_(Signature_Assertion)"},{"id":"","version":"3.7-rc","innovationName":"Улучшена поддержка для типа never возвращаемого из функций","dateRelease":"November 4, 2019","datePublication":"November 5, 2019","tags":["изменение"],"path":"Uluchshena_podderjka_dlya_tipa_never_vozvrashchaemogo_iz_funkcii"},{"id":"","version":"3.7-beta","innovationName":"Проверка не вызванных функций","dateRelease":"November 3, 2019","datePublication":"November 5, 2019","tags":["баг"],"path":"Proverka_ne_vyzvannyh_funkcii"},{"id":"","version":"3.7-beta","innovationName":"Рекурсивность для псевдонимов типов","dateRelease":"November 3, 2019","datePublication":"November 5, 2019","tags":["компилятор"],"path":"Rekursivnost_dlya_psevdonimov_tipov"},{"id":"","version":"3.7-alpha","innovationName":"Совместное использование флагов --declaration и --allowJs","dateRelease":"November 2, 2019","datePublication":"November 5, 2019","tags":["директивы"],"path":"Sovmestnoe_ispolzovanie_flagov_--declaration_i_--allowJs"},{"id":"","version":"3.7-alpha","innovationName":"@ts-nocheck в TypeScript файлах","dateRelease":"November 2, 2019","datePublication":"November 5, 2019","tags":["общее"],"path":"@ts-nocheck_v_TypeScript_failah"}]}},{"id":"5","isCollapse":false,"index":5,"data":{"releaseHistory":[{"version":"3.8","dateRelease":"February 20, 2020"}],"mmp":"3.8","innovations":[{"id":"","version":"3.8","innovationName":"Импорт и экспорт только типа и флаг --importsNotUsedAsValues","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"Import_i_eksport_tolko_tipa_i_flag_--importsNotUsedAsValues"},{"id":"","version":"3.8","innovationName":"Закрытые поля ECMAScript","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"Zakrytye_polya_ECMAScript"},{"id":"","version":"3.8","innovationName":"await высшего уровня","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"await_vysshego_urovnya"},{"id":"","version":"3.8","innovationName":"Реализация новой формы ре-экспорта","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"Realizaciya_novoi_formy_re-eksporta"},{"id":"","version":"3.8","innovationName":"Новая конфигурационная группа параметров watchOptions","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"Novaya_konfiguracionnaya_gruppa_parametrov_watchOptions"},{"id":"","version":"3.8","innovationName":"Новый флаг --assumeChangesOnlyAffectDirectDependencies","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"Novyi_flag_--assumeChangesOnlyAffectDirectDependencies"},{"id":"","version":"3.8","innovationName":"Модификаторы JSDocs","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"Modifikatory_JSDocs"},{"id":"","version":"3.8","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Более строгие проверки объединений имеющих с индексной сигнатурой","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Bolee_strogie_proverki_obedinenii_imeushchih_s_indeksnoi_signaturoi"},{"id":"","version":"3.8","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Тип object в JSDoc при активном флаге --noImplicitAny больше не расценивается как any","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Tip_object_v_JSDoc_pri_aktivnom_flage_--noImplicitAny_bolshe_ne_rascenivaetsya_kak_any"}]}},{"id":"6","isCollapse":false,"index":6,"data":{"releaseHistory":[{"version":"3.9","dateRelease":"May 12, 2020"}],"mmp":"3.9","innovations":[{"id":"","version":"3.9","innovationName":"Улучшение вывода типа для Promise.all","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"Uluchshenie_vyvoda_tipa_dlya_Promise.all"},{"id":"","version":"3.9","innovationName":"Сокращение скорости компиляции","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"Sokrashchenie_skorosti_kompilyacii"},{"id":"","version":"3.9","innovationName":"Комментарная директива @ts-expect-error","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"Kommentarnaya_direktiva_@ts-expect-error"},{"id":"","version":"3.9","innovationName":"Проверка вызова функции в тернарном условном операторе","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"Proverka_vyzova_funkcii_v_ternarnom_uslovnom_operatore"},{"id":"","version":"3.9","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменение поведения для оператора Non-Null при совместном использовании с оператором опциональной цепочки","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Izmenenie_povedeniya_dlya_operatora_Non-Null_pri_sovmestnom_ispolzovanii_s_operatorom_opcionalnoi_cepochki"},{"id":"","version":"3.9","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Возникновение ошибки при наличии в строке закрывающей фигурной или угловатой скобки в файлах с расширением TSX","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Vozniknovenie_oshibki_pri_nalichii_v_stroke_zakryvaushchei_figurnoi_ili_uglovatoi_skobki_v_failah_s_rasshireniem_TSX"},{"id":"","version":"3.9","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Повышение уровня проверки необязательных полей для типов определяющих тип пересечение","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Povyshenie_urovnya_proverki_neobyazatelnyh_polei_dlya_tipov_opredelyaushchih_tip_peresechenie"},{"id":"","version":"3.9","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Определение типа пересечения дискриминантными полями","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Opredelenie_tipa_peresecheniya_diskriminantnymi_polyami"},{"id":"","version":"3.9","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Параметр типа расширяющий тип any больше не наследует его характеристики","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Parametr_tipa_rasshiryaushchii_tip_any_bolshe_ne_nasleduet_ego_harakteristiki"},{"id":"","version":"3.9","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] get и set больше не перечисляемы","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_get_i_set_bolshe_ne_perechislyaemy"},{"id":"","version":"3.9","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] export * теперь всегда включается в сборку","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_export_*_teper_vsegda_vkluchaetsya_v_sborku"}]}},{"id":"7","isCollapse":false,"index":7,"data":{"releaseHistory":[{"version":"4.0","dateRelease":"August 20, 2020"}],"mmp":"4.0","innovations":[{"id":"","version":"4.0","innovationName":"Вариативный кортеж","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"Variativnyi_kortej"},{"id":"","version":"4.0","innovationName":"Помеченные элементы кортежа","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"Pomechennye_elementy_korteja"},{"id":"","version":"4.0","innovationName":"Операторы присваивания короткого замыкания","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"Operatory_prisvaivaniya_korotkogo_zamykaniya"},{"id":"","version":"4.0","innovationName":"Вывод типов для полей класса по параметрам конструктора","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"Vyvod_tipov_dlya_polei_klassa_po_parametram_konstruktora"},{"id":"","version":"4.0","innovationName":"unknown как тип исключения блока catch","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"unknown_kak_tip_isklucheniya_bloka_catch"},{"id":"","version":"4.0","innovationName":"--noEmit совмещенный с --incremental","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"--noEmit_sovmeshchennyi_s_--incremental"},{"id":"","version":"4.0","innovationName":"Пользовательская фабрика jsx фрагментов","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"Polzovatelskaya_fabrika_jsx_fragmentov"},{"id":"","version":"4.0","innovationName":"Добавление комментарной директивы @deprecated","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"Dobavlenie_kommentarnoi_direktivy_@deprecated"},{"id":"","version":"4.0","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменение lib.d.ts","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Izmenenie_lib.d.ts"},{"id":"","version":"4.0","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Переопределение аксессоров полем и наоборот теперь является ошибкой","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Pereopredelenie_aksessorov_polem_i_naoborot_teper_yavlyaetsya_oshibkoi"},{"id":"","version":"4.0","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Операнды для delete должны быть необязательными","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Operandy_dlya_delete_doljny_byt_neobyazatelnymi"},{"id":"","version":"4.0","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменение фабричного api Nodejs","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Izmenenie_fabrichnogo_api_Nodejs"}]}},{"id":"8","isCollapse":false,"index":8,"data":{"releaseHistory":[{"version":"4.1@beta","dateRelease":"September 18, 2020","datePublication":"September 18, 2020"},{"version":"4.1@beta_1","dateRelease":"September 18, 2020","datePublication":"October 08, 2020"}],"colors":{"bookCoverColors":{"--color_light":"#fff","--color_middle-lite":"#93cf94","--color_accent":"#aff933","--color_ambient":"#a12d2d"},"bookUpdateCurrentVersionCoverColors":{"--color":"#265589"}},"mmp":"4.1","innovations":[{"id":"","version":"4.1@beta_1","innovationName":"Изменение механизма проверки индексной сигнатуры","dateRelease":"September 18, 2020","datePublication":"October 08, 2020","tags":["Нововведение"],"path":"Izmenenie_mehanizma_proverki_indeksnoi_signatury"},{"id":"","version":"4.1@beta","innovationName":"Шаблонный литеральный строковый тип","dateRelease":"September 18, 2020","datePublication":"September 18, 2020","tags":["Нововведение"],"path":"Shablonnyi_literalnyi_strokovyi_tip"},{"id":"","version":"4.1@beta","innovationName":"Переопределение ключей в сопоставленных типах","dateRelease":"September 18, 2020","datePublication":"September 18, 2020","tags":["Нововведение"],"path":"Pereopredelenie_kluchei_v_sopostavlennyh_tipah"},{"id":"","version":"4.1@beta","innovationName":"Рекурсивные условные типы","dateRelease":"September 18, 2020","datePublication":"September 18, 2020","tags":["Изменение"],"path":"Rekursivnye_uslovnye_tipy"},{"id":"","version":"4.1@beta","innovationName":"paths без baseUrl","dateRelease":"September 18, 2020","datePublication":"September 18, 2020","tags":["Изменение"],"path":"paths_bez_baseUrl"},{"id":"","version":"4.1@beta","innovationName":"checkJs не требует активации allowJs","dateRelease":"September 18, 2020","datePublication":"September 18, 2020","tags":["Изменение"],"path":"checkJs_ne_trebuet_aktivacii_allowJs"},{"id":"","version":"4.1@beta","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] abstract больше не совместим с async","dateRelease":"September 18, 2020","datePublication":"September 18, 2020","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_abstract_bolshe_ne_sovmestim_s_async"},{"id":"","version":"4.1@beta","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] any и unknown доминируют в ложных позициях","dateRelease":"September 18, 2020","datePublication":"September 18, 2020","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_any_i_unknown_dominiruut_v_lojnyh_poziciyah"},{"id":"","version":"4.1@beta","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] --declaration и --outFile требуют имя корневого пакета","dateRelease":"September 18, 2020","datePublication":"September 18, 2020","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_--declaration_i_--outFile_trebuut_imya_kornevogo_paketa"},{"id":"","version":"4.1@beta","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] параметры resolve теперь обязательные","dateRelease":"September 18, 2020","datePublication":"September 18, 2020","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_parametry_resolve_teper_obyazatelnye"}]}},{"id":"9","isCollapse":false,"index":9,"data":{"releaseHistory":[{"version":"4.2","dateRelease":"February 23, 2021","datePublication":"March 4, 2021"}],"colors":{"bookCoverColors":{"--color_light":"#fff","--color_middle-lite":"#93cf94","--color_accent":"#aff933","--color_ambient":"#a12d2d"},"bookUpdateCurrentVersionCoverColors":{"--color":"#265589"}},"mmp":"4.2","innovations":[{"id":"","version":"4.2","innovationName":"Изменение поведения указания остаточных типов в кортеже","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Изменение"],"path":"Izmenenie_povedeniya_ukazaniya_ostatochnyh_tipov_v_korteje"},{"id":"","version":"4.2","innovationName":"Изменение вывода для псевдонимов типов","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Улучшение"],"path":"Izmenenie_vyvoda_dlya_psevdonimov_tipov"},{"id":"","version":"4.2","innovationName":"Ужесточение правил проверки для оператора in","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Нововведение"],"path":"Ujestochenie_pravil_proverki_dlya_operatora_in"},{"id":"","version":"4.2","innovationName":"Новый флаг --noPropertyAccessFromIndexSignature","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Нововведение"],"path":"Novyi_flag_--noPropertyAccessFromIndexSignature"},{"id":"","version":"4.2","innovationName":"Модификатор abstract для описания типа конструктора","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Нововведение"],"path":"Modifikator_abstract_dlya_opisaniya_tipa_konstruktora"},{"id":"","version":"4.2","innovationName":"Понимание структуры проекта с флагом --explainFiles","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Нововведение"],"path":"Ponimanie_struktury_proekta_s_flagom_--explainFiles"},{"id":"","version":"4.2","innovationName":"Проверка вызова функций в логических выражениях","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Улучшение"],"path":"Proverka_vyzova_funkcii_v_logicheskih_vyrajeniyah"},{"id":"","version":"4.2","innovationName":"Смягчение правил между необязательными членами и строковых индексных сигнатур","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Изменение"],"path":"Smyagchenie_pravil_mejdu_neobyazatelnymi_chlenami_i_strokovyh_indeksnyh_signatur"},{"id":"","version":"4.2","innovationName":"Деструктурированные переменные можно явно пометить как неиспользуемые","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Нововведение"],"path":"Destrukturirovannye_peremennye_mojno_yavno_pometit_kak_neispolzuemye"},{"id":"","version":"4.2","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Обновление lib.d.ts","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_Obnovlenie_lib.d.ts"},{"id":"","version":"4.2","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] noImplicitAny и новое поведение для оператора yield тип которого не может быть установлен явно","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_noImplicitAny_i_novoe_povedenie_dlya_operatora_yield_tip_kotorogo_ne_mojet_byt_ustanovlen_yavno"},{"id":"","version":"4.2","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Проверка вызова функций в условных операторах приурочена к флагу --strictNullChecks","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_Proverka_vyzova_funkcii_v_uslovnyh_operatorah_priurochena_k_flagu_--strictNullChecks"},{"id":"","version":"4.2","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Лимит для механизма spread в кортежах","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_Limit_dlya_mehanizma_spread_v_kortejah"},{"id":"","version":"4.2","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменение правил для оператора in","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_Izmenenie_pravil_dlya_operatora_in"},{"id":"","version":"4.2","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Расширение .d.ts теперь нельзя использовать в путях импорта","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_Rasshirenie_.d.ts_teper_nelzya_ispolzovat_v_putyah_importa"},{"id":"","version":"4.2","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменение типа параметра функции обратного вызова передаваемой в качестве аргумента функции visitNode","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_Izmenenie_tipa_parametra_funkcii_obratnogo_vyzova_peredavaemoi_v_kachestve_argumenta_funkcii_visitNode"},{"id":"","version":"4.2","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Отмена поведения литерального вывода шаблона из версии 4.2@beta","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_Otmena_povedeniya_literalnogo_vyvoda_shablona_iz_versii_4.2@beta"}]}},{"id":"10","isCollapse":false,"index":10,"data":{"releaseHistory":[{"version":"4.3@beta","dateRelease":"April 1, 2021","datePublication":"April 6, 2021"}],"colors":{"bookCoverColors":{"--color_light":"#fff","--color_middle-lite":"#c93737","--color_accent":"#e6e63a","--color_ambient":"#ff9443"},"bookUpdateCurrentVersionCoverColors":{"--color":"#265589"}},"mmp":"4.3","innovations":[{"id":"","version":"4.2","innovationName":"Отдельные типы аксеcсоров","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Улучшение"],"path":"Otdelnye_tipy_aksecsorov"},{"id":"","version":"4.2","innovationName":"Модификатор override и флаг --noImplicitOverride","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Нововведение"],"path":"Modifikator_override_i_flag_--noImplicitOverride"},{"id":"","version":"4.2","innovationName":"Улучшение работы шаблонного строкового типа","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Улучшение"],"path":"Uluchshenie_raboty_shablonnogo_strokovogo_tipa"},{"id":"","version":"4.2","innovationName":"Изменение поведения для объекта Promise в условных выражениях","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Изменение"],"path":"Izmenenie_povedeniya_dlya_obekta_Promise_v_uslovnyh_vyrajeniyah"},{"id":"","version":"4.2","innovationName":"Индексные сигнатуры класса","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Улучшение"],"path":"Indeksnye_signatury_klassa"},{"id":"","version":"4.2","innovationName":"Расширение возможностей ECMAScript приватного модификатора и флаг --useDefineForClassFields","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Улучшение"],"path":"Rasshirenie_vozmojnostei_ECMAScript_privatnogo_modifikatora_i_flag_--useDefineForClassFields"},{"id":"","version":"4.2","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменения в lib.d.ts","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_Izmeneniya_v_lib.d.ts"},{"id":"","version":"4.2","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Enum больше нельзя сравнивать с произвольными числами","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_Enum_bolshe_nelzya_sravnivat_s_proizvolnymi_chislami"}]}}],"pageNavDataAll":[{"name":"3.3","path":"3.3","sections":[{"name":"Повышение производительности сборки для команды --build --watch","path":"Povyshenie_proizvoditelnosti_sborki_dlya_komandy_--build_--watch","data":{"version":"3.3"}},{"name":"Улучшение поведения для типов Union указанных в качестве параметров функции","path":"Uluchshenie_povedeniya_dlya_tipov_Union_ukazannyh_v_kachestve_parametrov_funkcii","data":{"version":"3.3"}}]},{"name":"3.4","path":"3.4","sections":[{"name":"Опции компилятора --tsBuildInfoFile","path":"Opcii_kompilyatora_--tsBuildInfoFile","data":{"version":"3.4"}},{"name":"Опции компилятора --incremental","path":"Opcii_kompilyatora_--incremental","data":{"version":"3.4"}},{"name":"Массивоподобные readonly типы","path":"Massivopodobnye_readonly_tipy","data":{"version":"3.4"}},{"name":"Расширенный тип ReadonlyArray","path":"Rasshirennyi_tip_ReadonlyArray","data":{"version":"3.4"}},{"name":"Привидение к константе (const assertion)","path":"Prividenie_k_konstante_(const_assertion)","data":{"version":"3.4"}},{"name":"Проверка типов для globalThis","path":"Proverka_tipov_dlya_globalThis","data":{"version":"3.4"}}]},{"name":"3.5","path":"3.5","sections":[{"name":"Вспомогательный тип Omit","path":"Vspomogatelnyi_tip_Omit","data":{"version":"3.5"}},{"name":"Улучшение механизма проверки избыточных полей в объединённых типах (Union types)","path":"Uluchshenie_mehanizma_proverki_izbytochnyh_polei_v_obedinennyh_tipah_(Union_types)","data":{"version":"3.5"}},{"name":"Введение нового флага --allowUmdGlobalAccess","path":"Vvedenie_novogo_flaga_--allowUmdGlobalAccess","data":{"version":"3.5"}},{"name":"Улучшение механизма проверки объединенных типов","path":"Uluchshenie_mehanizma_proverki_obedinennyh_tipov","data":{"version":"3.5"}},{"name":"Улучшение механизма вывода типа высшего порядка для обобщенных конструкторов","path":"Uluchshenie_mehanizma_vyvoda_tipa_vysshego_poryadka_dlya_obobshchennyh_konstruktorov","data":{"version":"3.5"}},{"name":"Неявное ограничение обобщенных параметров типом unknown","path":"Neyavnoe_ogranichenie_obobshchennyh_parametrov_tipom_unknown","data":{"version":"3.5"}},{"name":"Изменение правил для типа unknown и индексной сигнатуре","path":"Izmenenie_pravil_dlya_tipa_unknown_i_indeksnoi_signature","data":{"version":"3.5"}},{"name":"Изменение логики для Object.keys для версии es5","path":"Izmenenie_logiki_dlya_Object.keys_dlya_versii_es5","data":{"version":"3.5"}}]},{"name":"3.6","path":"3.6","sections":[{"name":"Повышение типобезопасности генераторов","path":"Povyshenie_tipobezopasnosti_generatorov","data":{"version":"3.6"}},{"name":"Добавление хелпера имитирующего механизм spread array при компиляции в ecmascript ниже версии 6 при неактивном флаге --downlevelIteration","path":"Dobavlenie_helpera_imitiruushchego_mehanizm_spread_array_pri_kompilyacii_v_ecmascript_nije_versii_6_pri_neaktivnom_flage_--downlevelIteration","data":{"version":"3.6"}},{"name":"Расширение системы типов типами представляющими структуры данных только для чтения","path":"Rasshirenie_sistemy_tipov_tipami_predstavlyaushchimi_struktury_dannyh_tolko_dlya_chteniya","data":{"version":"3.6"}},{"name":"Строковой идентификатор функции-конструктора","path":"Strokovoi_identifikator_funkcii-konstruktora","data":{"version":"3.6"}},{"name":"Расширение вывода об ошибках при работе с Promise","path":"Rasshirenie_vyvoda_ob_oshibkah_pri_rabote_s_Promise","data":{"version":"3.6"}},{"name":"Слияние одноименных классов и функций из окружающего контекста","path":"Sliyanie_odnoimennyh_klassov_i_funkcii_iz_okrujaushchego_konteksta","data":{"version":"3.6"}},{"name":"Добавлена поддержка Unicode для идентификаторов","path":"Dobavlena_podderjka_Unicode_dlya_identifikatorov","data":{"version":"3.6"}},{"name":"Поддержка import.meta для SystemJS","path":"Podderjka_import.meta_dlya_SystemJS","data":{"version":"3.6"}},{"name":"get и set в окружающем контексте","path":"get_i_set_v_okrujaushchem_kontekste","data":{"version":"3.6"}},{"name":"Api для поддержки --build и --incremental","path":"Api_dlya_podderjki_--build_i_--incremental","data":{"version":"3.6"}},{"name":"Интеллектуальное определение синтаксиса авто-импорта","path":"Intellektualnoe_opredelenie_sintaksisa_avto-importa","data":{"version":"3.6"}}]},{"name":"3.7","path":"3.7","sections":[{"name":"Оператор опциональной последовательности (?.)","path":"Operator_opcionalnoi_posledovatelnosti_(?.)","data":{"version":"3.7-rc"}},{"name":"Оператор объединения со значением null (??)","path":"Operator_obedineniya_so_znacheniem_null_(??)","data":{"version":"3.7-rc"}},{"name":"Утверждение в сигнатуре (Signature Assertion)","path":"Utverjdenie_v_signature_(Signature_Assertion)","data":{"version":"3.7-rc"}},{"name":"Улучшена поддержка для типа never возвращаемого из функций","path":"Uluchshena_podderjka_dlya_tipa_never_vozvrashchaemogo_iz_funkcii","data":{"version":"3.7-rc"}},{"name":"Проверка не вызванных функций","path":"Proverka_ne_vyzvannyh_funkcii","data":{"version":"3.7-beta"}},{"name":"Рекурсивность для псевдонимов типов","path":"Rekursivnost_dlya_psevdonimov_tipov","data":{"version":"3.7-beta"}},{"name":"Совместное использование флагов --declaration и --allowJs","path":"Sovmestnoe_ispolzovanie_flagov_--declaration_i_--allowJs","data":{"version":"3.7-alpha"}},{"name":"@ts-nocheck в TypeScript файлах","path":"@ts-nocheck_v_TypeScript_failah","data":{"version":"3.7-alpha"}}]},{"name":"3.8","path":"3.8","sections":[{"name":"Импорт и экспорт только типа и флаг --importsNotUsedAsValues","path":"Import_i_eksport_tolko_tipa_i_flag_--importsNotUsedAsValues","data":{"version":"3.8"}},{"name":"Закрытые поля ECMAScript","path":"Zakrytye_polya_ECMAScript","data":{"version":"3.8"}},{"name":"await высшего уровня","path":"await_vysshego_urovnya","data":{"version":"3.8"}},{"name":"Реализация новой формы ре-экспорта","path":"Realizaciya_novoi_formy_re-eksporta","data":{"version":"3.8"}},{"name":"Новая конфигурационная группа параметров watchOptions","path":"Novaya_konfiguracionnaya_gruppa_parametrov_watchOptions","data":{"version":"3.8"}},{"name":"Новый флаг --assumeChangesOnlyAffectDirectDependencies","path":"Novyi_flag_--assumeChangesOnlyAffectDirectDependencies","data":{"version":"3.8"}},{"name":"Модификаторы JSDocs","path":"Modifikatory_JSDocs","data":{"version":"3.8"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Более строгие проверки объединений имеющих с индексной сигнатурой","path":"[KRITIChESKOE_IZMENENIE]_Bolee_strogie_proverki_obedinenii_imeushchih_s_indeksnoi_signaturoi","data":{"version":"3.8"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Тип object в JSDoc при активном флаге --noImplicitAny больше не расценивается как any","path":"[KRITIChESKOE_IZMENENIE]_Tip_object_v_JSDoc_pri_aktivnom_flage_--noImplicitAny_bolshe_ne_rascenivaetsya_kak_any","data":{"version":"3.8"}}]},{"name":"3.9","path":"3.9","sections":[{"name":"Улучшение вывода типа для Promise.all","path":"Uluchshenie_vyvoda_tipa_dlya_Promise.all","data":{"version":"3.9"}},{"name":"Сокращение скорости компиляции","path":"Sokrashchenie_skorosti_kompilyacii","data":{"version":"3.9"}},{"name":"Комментарная директива @ts-expect-error","path":"Kommentarnaya_direktiva_@ts-expect-error","data":{"version":"3.9"}},{"name":"Проверка вызова функции в тернарном условном операторе","path":"Proverka_vyzova_funkcii_v_ternarnom_uslovnom_operatore","data":{"version":"3.9"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменение поведения для оператора Non-Null при совместном использовании с оператором опциональной цепочки","path":"[KRITIChESKOE_IZMENENIE]_Izmenenie_povedeniya_dlya_operatora_Non-Null_pri_sovmestnom_ispolzovanii_s_operatorom_opcionalnoi_cepochki","data":{"version":"3.9"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Возникновение ошибки при наличии в строке закрывающей фигурной или угловатой скобки в файлах с расширением TSX","path":"[KRITIChESKOE_IZMENENIE]_Vozniknovenie_oshibki_pri_nalichii_v_stroke_zakryvaushchei_figurnoi_ili_uglovatoi_skobki_v_failah_s_rasshireniem_TSX","data":{"version":"3.9"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Повышение уровня проверки необязательных полей для типов определяющих тип пересечение","path":"[KRITIChESKOE_IZMENENIE]_Povyshenie_urovnya_proverki_neobyazatelnyh_polei_dlya_tipov_opredelyaushchih_tip_peresechenie","data":{"version":"3.9"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Определение типа пересечения дискриминантными полями","path":"[KRITIChESKOE_IZMENENIE]_Opredelenie_tipa_peresecheniya_diskriminantnymi_polyami","data":{"version":"3.9"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Параметр типа расширяющий тип any больше не наследует его характеристики","path":"[KRITIChESKOE_IZMENENIE]_Parametr_tipa_rasshiryaushchii_tip_any_bolshe_ne_nasleduet_ego_harakteristiki","data":{"version":"3.9"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] get и set больше не перечисляемы","path":"[KRITIChESKOE_IZMENENIE]_get_i_set_bolshe_ne_perechislyaemy","data":{"version":"3.9"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] export * теперь всегда включается в сборку","path":"[KRITIChESKOE_IZMENENIE]_export_*_teper_vsegda_vkluchaetsya_v_sborku","data":{"version":"3.9"}}]},{"name":"4.0","path":"4.0","sections":[{"name":"Вариативный кортеж","path":"Variativnyi_kortej","data":{"version":"4.0"}},{"name":"Помеченные элементы кортежа","path":"Pomechennye_elementy_korteja","data":{"version":"4.0"}},{"name":"Операторы присваивания короткого замыкания","path":"Operatory_prisvaivaniya_korotkogo_zamykaniya","data":{"version":"4.0"}},{"name":"Вывод типов для полей класса по параметрам конструктора","path":"Vyvod_tipov_dlya_polei_klassa_po_parametram_konstruktora","data":{"version":"4.0"}},{"name":"unknown как тип исключения блока catch","path":"unknown_kak_tip_isklucheniya_bloka_catch","data":{"version":"4.0"}},{"name":"--noEmit совмещенный с --incremental","path":"--noEmit_sovmeshchennyi_s_--incremental","data":{"version":"4.0"}},{"name":"Пользовательская фабрика jsx фрагментов","path":"Polzovatelskaya_fabrika_jsx_fragmentov","data":{"version":"4.0"}},{"name":"Добавление комментарной директивы @deprecated","path":"Dobavlenie_kommentarnoi_direktivy_@deprecated","data":{"version":"4.0"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменение lib.d.ts","path":"[KRITIChESKOE_IZMENENIE]_Izmenenie_lib.d.ts","data":{"version":"4.0"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Переопределение аксессоров полем и наоборот теперь является ошибкой","path":"[KRITIChESKOE_IZMENENIE]_Pereopredelenie_aksessorov_polem_i_naoborot_teper_yavlyaetsya_oshibkoi","data":{"version":"4.0"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Операнды для delete должны быть необязательными","path":"[KRITIChESKOE_IZMENENIE]_Operandy_dlya_delete_doljny_byt_neobyazatelnymi","data":{"version":"4.0"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменение фабричного api Nodejs","path":"[KRITIChESKOE_IZMENENIE]_Izmenenie_fabrichnogo_api_Nodejs","data":{"version":"4.0"}}]},{"name":"4.1","path":"4.1","sections":[{"name":"Изменение механизма проверки индексной сигнатуры","path":"Izmenenie_mehanizma_proverki_indeksnoi_signatury","data":{"version":"4.1@beta_1"}},{"name":"Шаблонный литеральный строковый тип","path":"Shablonnyi_literalnyi_strokovyi_tip","data":{"version":"4.1@beta"}},{"name":"Переопределение ключей в сопоставленных типах","path":"Pereopredelenie_kluchei_v_sopostavlennyh_tipah","data":{"version":"4.1@beta"}},{"name":"Рекурсивные условные типы","path":"Rekursivnye_uslovnye_tipy","data":{"version":"4.1@beta"}},{"name":"paths без baseUrl","path":"paths_bez_baseUrl","data":{"version":"4.1@beta"}},{"name":"checkJs не требует активации allowJs","path":"checkJs_ne_trebuet_aktivacii_allowJs","data":{"version":"4.1@beta"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] abstract больше не совместим с async","path":"[KRITIChESKOE_IZMENENIE]_abstract_bolshe_ne_sovmestim_s_async","data":{"version":"4.1@beta"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] any и unknown доминируют в ложных позициях","path":"[KRITIChESKOE_IZMENENIE]_any_i_unknown_dominiruut_v_lojnyh_poziciyah","data":{"version":"4.1@beta"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] --declaration и --outFile требуют имя корневого пакета","path":"[KRITIChESKOE_IZMENENIE]_--declaration_i_--outFile_trebuut_imya_kornevogo_paketa","data":{"version":"4.1@beta"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] параметры resolve теперь обязательные","path":"[KRITIChESKOE_IZMENENIE]_parametry_resolve_teper_obyazatelnye","data":{"version":"4.1@beta"}}]},{"name":"4.2","path":"4.2","sections":[{"name":"Изменение поведения указания остаточных типов в кортеже","path":"Izmenenie_povedeniya_ukazaniya_ostatochnyh_tipov_v_korteje","data":{"version":"4.2"}},{"name":"Изменение вывода для псевдонимов типов","path":"Izmenenie_vyvoda_dlya_psevdonimov_tipov","data":{"version":"4.2"}},{"name":"Ужесточение правил проверки для оператора in","path":"Ujestochenie_pravil_proverki_dlya_operatora_in","data":{"version":"4.2"}},{"name":"Новый флаг --noPropertyAccessFromIndexSignature","path":"Novyi_flag_--noPropertyAccessFromIndexSignature","data":{"version":"4.2"}},{"name":"Модификатор abstract для описания типа конструктора","path":"Modifikator_abstract_dlya_opisaniya_tipa_konstruktora","data":{"version":"4.2"}},{"name":"Понимание структуры проекта с флагом --explainFiles","path":"Ponimanie_struktury_proekta_s_flagom_--explainFiles","data":{"version":"4.2"}},{"name":"Проверка вызова функций в логических выражениях","path":"Proverka_vyzova_funkcii_v_logicheskih_vyrajeniyah","data":{"version":"4.2"}},{"name":"Смягчение правил между необязательными членами и строковых индексных сигнатур","path":"Smyagchenie_pravil_mejdu_neobyazatelnymi_chlenami_i_strokovyh_indeksnyh_signatur","data":{"version":"4.2"}},{"name":"Деструктурированные переменные можно явно пометить как неиспользуемые","path":"Destrukturirovannye_peremennye_mojno_yavno_pometit_kak_neispolzuemye","data":{"version":"4.2"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Обновление lib.d.ts","path":"[KRITIChESKOE_IZMENENIE]_Obnovlenie_lib.d.ts","data":{"version":"4.2"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] noImplicitAny и новое поведение для оператора yield тип которого не может быть установлен явно","path":"[KRITIChESKOE_IZMENENIE]_noImplicitAny_i_novoe_povedenie_dlya_operatora_yield_tip_kotorogo_ne_mojet_byt_ustanovlen_yavno","data":{"version":"4.2"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Проверка вызова функций в условных операторах приурочена к флагу --strictNullChecks","path":"[KRITIChESKOE_IZMENENIE]_Proverka_vyzova_funkcii_v_uslovnyh_operatorah_priurochena_k_flagu_--strictNullChecks","data":{"version":"4.2"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Лимит для механизма spread в кортежах","path":"[KRITIChESKOE_IZMENENIE]_Limit_dlya_mehanizma_spread_v_kortejah","data":{"version":"4.2"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменение правил для оператора in","path":"[KRITIChESKOE_IZMENENIE]_Izmenenie_pravil_dlya_operatora_in","data":{"version":"4.2"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Расширение .d.ts теперь нельзя использовать в путях импорта","path":"[KRITIChESKOE_IZMENENIE]_Rasshirenie_.d.ts_teper_nelzya_ispolzovat_v_putyah_importa","data":{"version":"4.2"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменение типа параметра функции обратного вызова передаваемой в качестве аргумента функции visitNode","path":"[KRITIChESKOE_IZMENENIE]_Izmenenie_tipa_parametra_funkcii_obratnogo_vyzova_peredavaemoi_v_kachestve_argumenta_funkcii_visitNode","data":{"version":"4.2"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Отмена поведения литерального вывода шаблона из версии 4.2@beta","path":"[KRITIChESKOE_IZMENENIE]_Otmena_povedeniya_literalnogo_vyvoda_shablona_iz_versii_4.2@beta","data":{"version":"4.2"}}]},{"name":"4.3","path":"4.3","sections":[{"name":"Отдельные типы аксеcсоров","path":"Otdelnye_tipy_aksecsorov","data":{"version":"4.2"}},{"name":"Модификатор override и флаг --noImplicitOverride","path":"Modifikator_override_i_flag_--noImplicitOverride","data":{"version":"4.2"}},{"name":"Улучшение работы шаблонного строкового типа","path":"Uluchshenie_raboty_shablonnogo_strokovogo_tipa","data":{"version":"4.2"}},{"name":"Изменение поведения для объекта Promise в условных выражениях","path":"Izmenenie_povedeniya_dlya_obekta_Promise_v_uslovnyh_vyrajeniyah","data":{"version":"4.2"}},{"name":"Индексные сигнатуры класса","path":"Indeksnye_signatury_klassa","data":{"version":"4.2"}},{"name":"Расширение возможностей ECMAScript приватного модификатора и флаг --useDefineForClassFields","path":"Rasshirenie_vozmojnostei_ECMAScript_privatnogo_modifikatora_i_flag_--useDefineForClassFields","data":{"version":"4.2"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменения в lib.d.ts","path":"[KRITIChESKOE_IZMENENIE]_Izmeneniya_v_lib.d.ts","data":{"version":"4.2"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Enum больше нельзя сравнивать с произвольными числами","path":"[KRITIChESKOE_IZMENENIE]_Enum_bolshe_nelzya_sravnivat_s_proizvolnymi_chislami","data":{"version":"4.2"}}]}]}},"staticQueryHashes":["408059355","63159454"]}