{"componentChunkName":"component---src-page-templates-what-is-new-page-what-is-new-page-provider-tsx","path":"/what-is-new/3.8","result":{"pageContext":{"localization":{"lang":"ru","title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи.","appNavigation":[{"id":"index","path":"/","name":"Главная"},{"id":"book-contents","path":"/book/chapters","name":"Оглавление"},{"id":"what-is-new-contents","path":"/what-is-new","name":"Что нового?"},{"id":"pdf","path":"/pdf","name":"PDF Версия"}],"notification":{"behaviorNotification":{"copyLink":"Ссылка скопирована!"}},"layouts":{"shared":{"informers":{"donateInformer":{"minBanner":{"label":"Хочешь поддержать проект финансово?","buttons":{"yes":"Да, хочу! Узнать подробнее...","no":"Нет. Закрыть окно."}},"maxBanner":{"html":{"__html":"Чтобы <b>контент</b> приносил <b>максимальную пользу</b> его <b>необходимо</b> постоянно <b>совершенствовать</b> и <b>адаптировать</b>\n        под каждую новую версию <i>TypeScript</i>. Это отнимает <b>много времени</b> и без Вашей, даже <b>незначительно\n        финансовой</b>, поддержки практически <b>невозможно</b>. Помогая проекту вы прежде всего принимаете <b>участие</b> в\n        <b>развитии</b> профессионального уровня ваших <b>друзей</b>, <b>коллег</b>, <b>подчиненных</b>. Выпусти желание\n        сделать свой мир лучше. <b>Сделай контент для будущих специалистов ещё качественней и доступней!</b>"},"href":"#"}},"watchWithTelegramInformer":{"text":["Хочешь поддерживать свои знания в актуальном состоянии?","Тогда подписывайся на Telegram канал и узнавай обо всех изменениях!"],"subscribeButton":{"label":"Подписаться"}},"contentLevelUpInformer":{"text":"Кажется непонятным и слишком сложным? Чего-то не хватает? Расскажи об этом! Помоги сделать контент более доступным для следующих поколений!","buttons":[{"label":"Сообщить на Github","href":""}]}},"links":{"telegram":"#"},"appContent":{"contentNav":{"prevButton":{"label":"Назад"},"nextButton":{"label":"Вперед"}}},"appHeader":{"navToggleButton":{"tooltips":{"open":["Открыть боковое","меню"],"close":["Закрыть боковое","меню"]}},"appMenu":{"pdfButton":{"href":"#","tooltip":["Скачать","PDF версию"],"label":"Скачать PDF версию"},"telegramButton":{"href":"https://t.me/nauchikus","tooltip":["Следить за","изменениями в","Telegram"],"label":"Следить за изменениями в Telegram"},"githubButton":{"href":"https://github.com/nauchikus/typescript-definitive-guide","tooltip":["Посетить проект на","Github"],"label":"Посетить проект на Github"}},"donateDropdown":{"href":"https://yasobe.ru/na/typescript_definitive_guide","toggleButton":{"label":["Поддержать","финансово"]},"content":{"title":"Сделай контент для будущих поколений ещё качественней и доступней!","subtitle":{"__html":"Контент требует постоянного совершенствования и адаптации под каждую новую версию\nязыка TypeScript.\nЭто отнимает много времени и без Вашей, даже незначительно финансовой, поддержки практически\nневозможно.\nПрими участие в развитии профессионального уровня своих друзей, коллег, подчиненных. Встань на\nсторону небезразличных!"}}},"appSearch":{"inputPlaceholder":"Я ищу...","submitButton":{"ariaLabel":"Отправить"}}},"pdf":{"downloadPdfBookButton":{"title":"Скачать PDF Версию","href":"pdf/TypeScript Подробное Руководство.pdf"}}}},"pages":{"index":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"appDescription":"Книга и документация в одном","subtitleAll":["TypeScript в деталях","TypeScript крупным планом","TypeScript под микроскопом","TypeScript со всех сторон"]}},"book__chapters":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"tocItem":{"copyLinkToBufferButton":{"tooltip":"Скопировать ссылку в буфер обмена"},"collapseTocButton":{"tooltip":{"openState":"Открыть","closeState":"Закрыть"}}},"secondaryContentBar":{"label":"Оглавление","tocFilterButton":{"tooltip":"Отфильтровать на основе разделов"},"tocCollapseAllButton":{"tooltip":{"openState":"Раскрыть все","closeState":"Закрыть все"}}},"asideLayout":{"tagBarLabel":"Тематические разделы","tagBar":{"cleanFilterButton":"Все разделы"}}}},"book__chapter":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"secondaryContentBar":{"editOnGithubButton":{"tooltip":"Редактировать на Github"}}}},"what-is-new__toc":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"primaryContentBar":{"label":"История нововведений"},"tocItem":{"copyLinkToBufferButton":{"tooltip":"Скопировать ссылку в буфер обмена"}}}},"not-found":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"notFound_404":{"status":"404","title":"Страница не найдена :("}}},"pdf":{"metadata":{"title":"TypeScript - в деталях","description":"Бесплатная pdf книга на русском по языку TypeScript."},"gui":{"title":"TypeScript Подробное Руководство","subtitle":"PDF Версия"}}}},"innovationData":{"versionMMP":"3.8","releaseHistory":[{"version":"3.8","dateRelease":"February 20, 2020","datePublication":"February 20, 2020"}],"mmp":"3.8","innovations":[{"mmp":"3.8","id":"","version":"3.8","innovationName":"Импорт и экспорт только типа и флаг --importsNotUsedAsValues","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"Import_i_eksport_tolko_tipa_i_flag_--importsNotUsedAsValues","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"Import_i_eksport_tolko_tipa_i_flag_--importsNotUsedAsValues\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Импорт и экспорт только типа и флаг --importsNotUsedAsValues</span></h2>\n<div class=\"content__tag-bar\"></div>\n<p class=\"content__paragraph\">Механизм уточнения импорта и экспорта (<code>import\\export</code>) выступает в качестве указаний компилятору, что данную конструкцию следует воспринимать исключительно как тип. Форма уточняющего импорта и экспорта включает в себя ключевое слово <code>type</code> идущее следом за ключевым словом <code>import</code> либо <code>export</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span>Type<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./type\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span>Type<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Уточнению могут подвергаться только конструкции расцениваемые исключительно как типы (<code>interface</code>, <code>type alias</code> и <code>class</code>). </p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file types.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassType</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IInterfaceType</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">AliasType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file index.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span>ClassType<span class=\"token punctuation\">,</span> IInterfaceType<span class=\"token punctuation\">,</span> AliasType<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./types\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span>ClassType<span class=\"token punctuation\">,</span> IInterfaceType<span class=\"token punctuation\">,</span> AliasType<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Значения к которым можно отнести как экземпляры объектов, так и функции (<code>function expression</code> и <code>function declaration</code>) уточнятся, как в отдельности так и в одной форме с типами, не могут.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file types.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassType</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IInterfaceType</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">AliasType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file index.ts</span>\n\n<span class=\"token comment\">// import type {o, fe, fd} from \"./types\"; // Error! Type-only import must reference a type, but 'o' is a value.ts(1361)</span>\n<span class=\"token comment\">// import type {o, fe, fd, ClassType, IInterfaceType, AliasType} from \"./types\"; // Error! Type-only import must reference a type, but 'o' is a value.ts(1361)</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>o<span class=\"token punctuation\">,</span> fe<span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./types\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok!</span>\n\n\n<span class=\"token comment\">// export type {o, fe, fd}; // Error! Type-only export must reference a type, but 'o' is a value.ts(1361)</span>\n<span class=\"token comment\">// export type {o, fe, fd, ClassType, IInterfaceType, AliasType} from \"./types\"; // Error! Type-only export must reference a type, but 'o' is a value.ts(1361)</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>o<span class=\"token punctuation\">,</span> fe<span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok!</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Кроме того, уточнённая форма импорта и экспорта не может одновременно содержать импорт\\экспорт по умолчанию и не по умолчанию.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file types.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DefaultExportType</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExportType</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file index.ts</span>\n\n<span class=\"token comment\">/**\n * Error!\n * All imports in import declaration are unused.ts(6192)\n * A type-only import can specify a default import or named bindings, but not both.ts(1363)\n */</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">DefaultType</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>ExportType<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./types\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Также не будет лишним оговорить, что классы экспортированные как уточненные само собой разумеется не могут участвовать в механизме наследования.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file Base.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file index.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span>Base<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Base\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Base</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Base' only refers to a type, but is being used as a value here.ts(2693)</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">В дополнение механизму уточнения формы импорта\\экспорта был добавлен флаг <code>--importsNotUsedAsValues</code> ожидаемый одно из трех значений. Но прежде чем познакомится с каждым предлагаю поглубже погрузится в природу возникновения необходимости в данном механизме.</p>\n<p class=\"content__paragraph\">Большинство разработчиков используя в повседневной работе механизм импорта\\экспорта даже не подозревают, что с ним связанно немало различных трудностей, которые возникают из-за механизмов призванных оптимизировать код. Но для начала рассмотрим несколько простых вводных примеров.</p>\n<p class=\"content__paragraph\">Представьте ситуацию при которой один модуль импортирует необходимый ему тип представленный такой конструкцией как <code>interface</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file IPerson.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPerson</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file action.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>IPerson<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./IPerson\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>person<span class=\"token operator\">:</span>IPerson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Поскольку интерфейс является конструкцией присущей исключительно <em>TypeScript</em>, то не удивительно, что после компиляции от неё не останется и следа.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_js\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">js</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// после компиляции @file action.js</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_js\"></div>\n</div>\n<p class=\"content__paragraph\">Теперь представьте, что один модуль импортирует конструкцию представленную классом, который задействован в логике уже знакомой нам функции <code>action()</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file IPerson.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPerson</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">readonly</span> name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[person </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file action.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>IPerson<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./IPerson\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Person<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Person\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>person<span class=\"token operator\">:</span>IPerson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_js\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">js</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// после компиляции @file action.js</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Person<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Person\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_js\"></div>\n</div>\n<p class=\"content__paragraph\">В этом случае класс <code>Person</code> был включён в скомпилированный файл поскольку необходим для правильного выполнения программы.</p>\n<p class=\"content__paragraph\">А теперь представьте ситуацию когда класс <code>Person</code> задействован в том же модуле <code>action.ts</code>, но исключительно в качестве типа. Другими словами он не задействован в логике работы модуля.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file Person.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">readonly</span> name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[person </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file action.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Person<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Person\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>person<span class=\"token operator\">:</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Подумайте, что должна включать в себя итоговая сборка? Если вы выбрали вариант идентичный первому, то вы совершенно правы! Поскольку класс <code>Person</code> используется в качестве типа, то нет смысла включать его в результирующий файл.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_js\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">js</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// после компиляции @file action.js</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_js\"></div>\n</div>\n<p class=\"content__paragraph\">Подобное поведение кажется логичным и возможно благодаря механизму называемому <em>import elision</em>. Этот механизм определяет, что конструкции которые теоретически могут быть включены в скомпилированный модуль требуются ему исключительно в качестве типа. И как уже можно было догадаться именно с этим механизмом и связанны моменты мешающие оптимизаций кода. Тут-то и вступает в дело механизм уточнения формы импорта\\экспорта.</p>\n<p class=\"content__paragraph\">Механизм уточнения способен разрешить возникающие перед <em>import-elision</em> трудности при ре-экспорте модулей предотвращению которых способствует установленный в значение <code>true</code> флаг <code>--isolatedModules</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file module.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IActionParams</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>params<span class=\"token operator\">:</span>IActionParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file re-export.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>IActionParams<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./module\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * [Error! ts &lt;3.8] > Cannot re-export a type when the '--isolatedModules' flag is provided.ts(1205)\n * \n * [Error! ts >=3.8] > Re-exporting a type when the '--isolatedModules' flag is provided requires using 'export type'.ts(1205)\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>IActionParams<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">/**\n * \n * Поскольку компиляторы как TypeScript так и Babel\n * в контексте файла неспособны определить является\n * ли конструкция IActionParams допустимой для JavaScript\n * существует вероятность возникновения ошибки. Простыми\n * словами механизмы обоих компиляторов не знаю нужно ли\n * удалять следы связанные с IActionParams из скомпилированного\n * .js кода или нет. Именно поэтому был добавлен флаг \n * --isolatedModules который предупреждает о опасной ситуации.\n */</span>\n\n </code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Рассмотренный выше случай можно разрешить с помощью явного уточнения формы импорта\\экспорта.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file re-export.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>IActionParams<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./module\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Явно указываем, что IActionParams это тип.\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span>IActionParams<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>action<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Специально введенный и ранее упомянутый флаг <code>--importsNotUsedAsValues</code>, как уже было сказано, ожидает одно из трех возможных на данный момент значений - <code>remove</code>, <code>preserve</code> или <code>error</code>.</p>\n<p class=\"content__paragraph\">Значение <code>remove</code> активирует или другими словами оставляет поведение реализуемое до версии <code>3.8</code>.\nЗначения <code>preserve</code> способно разрешить проблему возникающую при экспорте так называемых сайд-эффектов.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file module-with-side-effects.ts</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">incrementVisitCounterLocalStorage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// увеличиваем счетчик посещаемости в localStorage</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IDataFromModuleWithSideEffects</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">incrementVisitCounterLocalStorage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ожидается, что вызов произойдет в момент подключения модуля</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file index.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>IDataFromModuleWithSideEffects<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./module\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> data<span class=\"token operator\">:</span>IDataFromModuleWithSideEffects <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Несмотря на то, что модуль module.ts\n * задействован в коде, его содержимое\n * не будет включено в скомпилированную\n * программу, поскольку компилятор исключает\n * импорты конструкций не участвующих в её логике.\n * Таким образом функция incrementVisitCounterLocalStorage()\n * никогда не будет вызвана, а значит программа не будет\n * работать корректно! \n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_js\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">js</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// после компиляции @file index.js</span>\n\n<span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * В итоге программе ничего не\n * известно о модуле module-with-side-effects.ts\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_js\"></div>\n</div>\n<p class=\"content__paragraph\">Решение из ситуации описанной выше заключается в повторном указании импорта всего модуля. Но не всем такое решение кажется очевидным.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>IDataFromModuleWithSideEffects<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./module-with-side-effects\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./module-with-side-effects\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// импорт всего модуля</span>\n\n<span class=\"token keyword\">let</span> data<span class=\"token operator\">:</span>IDataFromModuleWithSideEffects <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_js\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">js</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// после компиляции @file index.js</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./module-with-side-effects.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Теперь программа выполнится так как и ожидалось.\n * То есть модуль module-with-side-effects.ts включен\n * в её состав.\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_js\"></div>\n</div>\n<p class=\"content__paragraph\">Поэтому прежде всего начиная с версии <code>3.8</code> сама <code>ide</code> укажет на возможность уточнения импорта исключительно типов, что в свою очередь должно подтолкнуть на размышление об удалении импорта при компиляции.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>IDataFromModuleWithSideEffects<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./module-with-side-effects\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//This import may be converted to a type-only import.ts(1372)</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Кроме того, флаг <code>preserve</code> в отсутствие уточнения поможет избавиться от повторного указания импорта. Простыми словами значение <code>preserve</code> указывает компилятору импортировать все модули полностью.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file module-with-side-effects.ts</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">incrementVisitCounterLocalStorage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// увеличиваем счетчик посещаемости в localStorage</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IDataFromModuleWithSideEffects</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">incrementVisitCounterLocalStorage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file module-without-side-effects.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IDataFromModuleWithoutSideEffects</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file index.ts</span>\n\n\n<span class=\"token comment\">// Без уточнения</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>IDataFromModuleWithSideEffects<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./module-with-side-effects\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>IDataFromModuleWithoutSideEffects<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./module-without-side-effects\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">let</span> dataFromModuleWithSideEffects<span class=\"token operator\">:</span>IDataFromModuleWithSideEffects <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> dataFromModuleWithoutSideEffects<span class=\"token operator\">:</span>IDataFromModuleWithoutSideEffects <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_js\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">js</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// после компиляции @file index.js</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./module-with-side-effects\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./module-without-side-effects\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> dataFromModuleWithSideEffects <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> dataFromModuleWithoutSideEffects <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * \n * Несмотря на то, что импортировались\n * исключительно конструкции-типы, модули\n * были импортированы полностью.\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_js\"></div>\n</div>\n<p class=\"content__paragraph\">В случае уточнения поведение при компиляции останется прежним. То есть в импорты в скомпилированный файл включены не будут.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file index.ts</span>\n\n\n<span class=\"token comment\">// С уточнением</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span>IDataFromModuleWithSideEffects<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./module-with-side-effects\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span>IDataFromModuleWithoutSideEffects<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./module-without-side-effects\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">let</span> dataFromModuleWithSideEffects<span class=\"token operator\">:</span>IDataFromModuleWithSideEffects <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> dataFromModuleWithoutSideEffects<span class=\"token operator\">:</span>IDataFromModuleWithoutSideEffects <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_js\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">js</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// после компиляции @file index.js</span>\n\n<span class=\"token keyword\">let</span> dataFromModuleWithSideEffects <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> dataFromModuleWithoutSideEffects <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * \n * Импорты отсутствуют.\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_js\"></div>\n</div>\n<p class=\"content__paragraph\">Если же флагу <code>--importsNotUsedAsValues</code> задано значение <code>error</code>, то при импортировании типов без явного уточнения будет считаться ошибочным поведением.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file index.ts</span>\n\n<span class=\"token comment\">/**\n * \n * [0][1] Error > This import is never used as a value and must use 'import type' because the 'importsNotUsedAsValues' is set to 'error'.ts(1371)\n */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>IDataFromModuleWithSideEffects<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./module-with-side-effects\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>IDataFromModuleWithoutSideEffects<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./module-without-side-effects\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">let</span> dataFromModuleWithSideEffects<span class=\"token operator\">:</span>IDataFromModuleWithSideEffects <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> dataFromModuleWithoutSideEffects<span class=\"token operator\">:</span>IDataFromModuleWithoutSideEffects <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Скомпилированный код выше после устранения ошибок, то есть после уточнения, включать в себя импорты не будет.</p>\n<p class=\"content__paragraph\">В заключение стоит заметить, что в теории уточнение такой конструкции, как класс, способно ускорить компиляцию, поскольку избавляет компилятор от ненужных проверок на вовлечении его в логику работы модуля. Ну и, кроме того, уточнения формы импорта\\экспорта, это ещё один способ сделать код более информативным.</p>","commitInfoAll":[{"committedDate":"2020-09-08T11:53:53Z","message":"book(технические изменения (link, md, т.п.)): change code wrapper\n\nchange code wrapper from ~ to ` and from typescript to ts","messageHeadline":"book(технические изменения (link, md, т.п.)): change code wrapper","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars.githubusercontent.com/u/31518738?v=4"}},{"committedDate":"2021-03-22T08:08:33Z","message":"fixed grammar and syntax errors in the text","messageHeadline":"fixed grammar and syntax errors in the text","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"mindyourlifeguide","bio":"Front-end developer","location":"Kyiv, Ukraine","avatarUrl":"https://avatars.githubusercontent.com/u/35348648?u=d52456eed154db660092623fe6e0ebb516677a95&v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.8/Импорт и экспорт только типа и флаг --importsNotUsedAsValues/content.md"},{"mmp":"3.8","id":"","version":"3.8","innovationName":"Закрытые поля ECMAScript","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"Zakrytye_polya_ECMAScript","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"Zakrytye_polya_ECMAScript\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Закрытые поля ECMAScript</span></h2>\n<div class=\"content__tag-bar\"></div>\n<p class=\"content__paragraph\">Помимо сокрытия полей класса от внешней среды с помощью модификатора доступа <code>private</code>, присущего исключительно <em>TypeScript</em>, начиная с версии <code>3.8</code> появилась возможность прибегнуть к механизму предусмотренного спецификацией <em>ECMAScript</em>. Для того, что бы воспользоваться данным механизмом идентификаторы скрываемых полей должны начинаться с символа решетка <code>#</code>.\nДоступ к защищённому полю класса ограничивается областью видимости класса в котором оно объявлено, а при обращении к нему необходимо также указывать символ решетка.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    #isLife<span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// защищенное поле класса</span>\n\n    <span class=\"token keyword\">get</span> <span class=\"token function\">isLife</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#isLife<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> animal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">.</span>isLife<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// обращение к аксессору, а не защищенному полю</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Поскольку доступ ограничивается областью видимости класса, потомки не могут обращаться к защищенным полям своих предков.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    #isLife<span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// защищенное поле класса</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bird</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#isLife<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error! > Property '#isLife' is not accessible outside class 'Animal' because it has a private identifier.ts(18013)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">В отличии от модификатора доступа <code>private</code> данный механизм не может быть применен к методам класса, но так как за его появлением стоит спецификация <em>ECMAScript</em>, он продолжает действовать в скомпилированной программе. Именно поэтому, в отличии от сценария с модификатором доступа <code>private</code>, <em>потомки</em> могут без страха нарушить ожидаемый ход выполнения программы объявлять защищенные поля чьи идентификаторы идентичны объявлениям в их <em>супер-классах</em>. </p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// сценарий с модификатором доступа private</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> _isLife<span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/**\n * Error!\n * \n * Class 'Bird' incorrectly extends base class 'Animal'.\n  Types have separate declarations of a private property '_isLife'.ts(2415)\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bird</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> _isLife<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// сценарий с защищенными полями предусмотренными спецификацией ECMAScript</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    #isLife<span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/**\n * Ok!\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bird</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    #isLife<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">И в заключение стоит упомянуть, что существует несколько нюансов. Один из них заключается в том, что закрытые поля нельзя объявлять непосредственно в конструкторе.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Parameter declaration expected.ts(1138)</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>#isLife <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Другой нюанс связан с тем, что код содержащий закрытые поля класса может быть скомпилирован исключительно в версии <code>es6</code> и выше.</p>","commitInfoAll":[{"committedDate":"2020-09-08T11:53:53Z","message":"book(технические изменения (link, md, т.п.)): change code wrapper\n\nchange code wrapper from ~ to ` and from typescript to ts","messageHeadline":"book(технические изменения (link, md, т.п.)): change code wrapper","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars.githubusercontent.com/u/31518738?v=4"}},{"committedDate":"2021-03-21T11:32:13Z","message":"fixed grammar and syntax errors in the text, corrected links","messageHeadline":"fixed grammar and syntax errors in the text, corrected links","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"mindyourlifeguide","bio":"Front-end developer","location":"Kyiv, Ukraine","avatarUrl":"https://avatars.githubusercontent.com/u/35348648?u=d52456eed154db660092623fe6e0ebb516677a95&v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.8/Закрытые поля ECMAScript/content.md"},{"mmp":"3.8","id":"","version":"3.8","innovationName":"await высшего уровня","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"await_vysshego_urovnya","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"await_vysshego_urovnya\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>await высшего уровня</span></h2>\n<div class=\"content__tag-bar\"></div>\n<p class=\"content__paragraph\">Поскольку современную разработку на языке <em>JavaScript</em> сложно представить без таких конструкций как <code>Promise</code>, которые выглядят намного привлекательней при использовании совместно с таким механизмом активирующимся при помощи ключевого слова <code>await</code>. Но правилами установлено, что ключевое слово <code>await</code> должно указываться исключительно в функциях объявленных с использованием ключевого слова <code>async</code>. Это в свою очередь, в некоторых случаях вынуждало разработчиков объявлять не требующиеся им функции.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * Применение ключевого слова await\n * требует объявления функции в которой\n * появляется потребность исключительно\n * из-за необходимости в ключевом слове async\n */</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">run</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> hello <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> world <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">World</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    \n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hello<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>world<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>greeting<span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Создатели спецификации <em>ECMScript</em> обратили на это внимание и добавили в неё такой механизм, как <code>await</code> высшего уровня (<em>top-level await</em>). <code>await</code> высшего уровня позволяет избавиться от не требующейся функции.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file index.ts</span>\n\n<span class=\"token comment\">/**\n * Внимание, псевдо код!\n * Данный код находящийся\n * в файле index.ts не считается\n * модулем. Объяснение дается далее\n * по содержанию. \n */</span>\n\n<span class=\"token keyword\">let</span> hello <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> world <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">World</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> greeting <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hello<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>world<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Единственное стоит всегда помнить, что высшим уровнем считается модуль, а файл в <em>TypeScript</em> считается модулем тогда, когда включает в себя хотя бы одно упоминания импорта или экспорта. Поэтому не исключено, что в особых случаях появится необходимость приведения к модулю.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file greeting-utils.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hello<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>world<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> \n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hello<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>world<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// пример с import</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> GreetingUtils <span class=\"token keyword\">from</span> <span class=\"token string\">\"./greeting-utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> hello <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> world <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">World</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> greeting <span class=\"token operator\">=</span> GreetingUtils<span class=\"token punctuation\">.</span><span class=\"token function\">toMessage</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">,</span> world<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// пример с пустым экспортом</span>\n\n<span class=\"token keyword\">let</span> hello <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> world <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">World</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> greeting <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hello<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>world<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Кроме того, поддержка <code>await</code> высшего уровня становится доступной при компиляции в версию начиная с <code>es2017</code>, а в качестве модулей выбрано <code>esnext</code> или <code>system</code>.</p>","commitInfoAll":[{"committedDate":"2020-09-08T11:53:53Z","message":"book(технические изменения (link, md, т.п.)): change code wrapper\n\nchange code wrapper from ~ to ` and from typescript to ts","messageHeadline":"book(технические изменения (link, md, т.п.)): change code wrapper","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars.githubusercontent.com/u/31518738?v=4"}},{"committedDate":"2021-03-22T08:08:33Z","message":"fixed grammar and syntax errors in the text","messageHeadline":"fixed grammar and syntax errors in the text","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"mindyourlifeguide","bio":"Front-end developer","location":"Kyiv, Ukraine","avatarUrl":"https://avatars.githubusercontent.com/u/35348648?u=d52456eed154db660092623fe6e0ebb516677a95&v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.8/await высшего уровня/content.md"},{"mmp":"3.8","id":"","version":"3.8","innovationName":"Реализация новой формы ре-экспорта","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"Realizaciya_novoi_formy_re-eksporta","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"Realizaciya_novoi_formy_re-eksporta\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Реализация новой формы ре-экспорта</span></h2>\n<div class=\"content__tag-bar\"></div>\n<p class=\"content__paragraph\">Зачастую появляется необходимость ре-экспорта содержимого модуля, как единую точку входа.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @file utils.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mul</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// MathUtils.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> MathUtils <span class=\"token keyword\">from</span> <span class=\"token string\">\"./utils\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>MathUtils<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Подобное встречается столь часто, что в спецификацию <em>ECMAScript 2020</em> была включена новая форма ре-экспорта всего содержимого.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Identificator <span class=\"token keyword\">from</span> <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p class=\"content__paragraph\">Благодаря разработчикам языка <em>TypeScript</em> такой вид ре-экспорта стал доступен начиная с версии <code>3.8</code>. Предыдущий пример с применением нового синтаксиса мог бы сократится до одной строчки.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// MathUtils.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> MathUtils <span class=\"token keyword\">from</span> <span class=\"token string\">\"./utils\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","commitInfoAll":[{"committedDate":"2020-09-08T11:53:53Z","message":"book(технические изменения (link, md, т.п.)): change code wrapper\n\nchange code wrapper from ~ to ` and from typescript to ts","messageHeadline":"book(технические изменения (link, md, т.п.)): change code wrapper","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.8/Реализация новой формы ре-экспорта/content.md"},{"mmp":"3.8","id":"","version":"3.8","innovationName":"Новая конфигурационная группа параметров watchOptions","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"Novaya_konfiguracionnaya_gruppa_parametrov_watchOptions","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"Novaya_konfiguracionnaya_gruppa_parametrov_watchOptions\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Новая конфигурационная группа параметров watchOptions</span></h2>\n<div class=\"content__tag-bar\"></div>\n<p class=\"content__paragraph\">Оптимально организовать наблюдение за файловой системой дело довольно не простое поскольку ресурсоемкость и энергозатратность сильно зависит как от <em>api</em> платформы, так и от предоставляемых различными библиотеками деклараций. И это не удивительно, ведь ОС по-разному реализуют процесс наблюдения и тем самым затрудняют поддержание актуальности при интенсивном изменении отслеживаемых файлов. И, кроме того, только задумайтесь, сколько пакетов в директории <em>node</em>modules_ и каково суммарное количество строк предоставляемых ими деклараций <em>.d.ts</em>?</p>\n<p class=\"content__paragraph\">Поэтому перед разработчиками <em>TypeScript</em> всегда остро стояла задача максимально оптимизировать этот процесс. Как следствие в конфигурационном файле <em>tsconfig.json</em> появилась новая группа для конфигурирования <code>watchOptions</code> позволяющая выбрать оптимальную стратегию в зависимости от самого проекта.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_json\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">json</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// tsconfig.json</span>\n\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// новое поле</span>\n    <span class=\"token property\">\"watchOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_json\"></div>\n</div>\n<p class=\"content__paragraph\">Так новая группа реализует четыре параметра - <code>watchFile</code>, <code>watchDirectory</code>, <code>fallbackPolling</code> и <code>synchronousWatchDirectory</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_json\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">json</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// tsconfig.json</span>\n\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// новое поле</span>\n    <span class=\"token property\">\"watchOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"watchFile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"watchDirectory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"fallbackPolling\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"synchronousWatchDirectory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"...\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_json\"></div>\n</div>\n<ul class=\"content__list\">\n<li>\n<p class=\"content__paragraph\"><code>watchFile</code>: стратегия наблюдения за отдельными файлами</p>\n<ul class=\"content__list\">\n<li><code>fixedPollingInterval</code>: Проверять каждый файл на наличие изменений несколько раз в секунду с фиксированным интервалом.</li>\n<li><code>priorityPollingInterval</code>: Проверять каждый файл на наличие изменений несколько раз в секунду, но использовать эвристику для проверки файлов определенных типов реже, чем других.</li>\n<li><code>dynamicPriorityPolling</code>: Использовать динамическую очередь, в которой менее часто изменяемые файлы будут проверяться реже.</li>\n<li><code>useFsEvents</code> [ПО УМОЛЧАНИЮ]: Пытаться использовать собственные события операционной системы / файловой системы для изменения файлов.</li>\n<li><code>useFsEventsOnParentDirectory</code>: Пытаться использовать собственные события операционной системы/файловой системы для прослушивания изменений в каталогах, содержащих файл. Это может использовать меньше файловых наблюдателей, но также быть менее точным.</li>\n</ul>\n</li>\n<li>\n<p class=\"content__paragraph\"><code>watchDirectory</code>: стратегия наблюдения за целыми деревьями каталогов в системах, в которых отсутствует рекурсивная функция наблюдения за файлами.</p>\n<ul class=\"content__list\">\n<li><code>fixedPollingInterval</code>: Проверять каждый каталог на наличие изменений несколько раз в секунду с фиксированным интервалом.</li>\n<li><code>dynamicPriorityPolling</code>: Использовать динамическую очередь, в которой менее часто изменяемые каталоги будут проверяться реже.</li>\n<li><code>useFsEvents</code>[ПО УМОЛЧАНИЮ]: Пытаться использовать собственные события операционной системы / файловой системы для изменений каталога.</li>\n</ul>\n</li>\n<li>\n<p class=\"content__paragraph\"><code>fallbackPolling</code>: при использовании событий файловой системы этот параметр определяет стратегию опроса, которая используется, когда в системе заканчиваются собственные наблюдатели файлов и / или не поддерживаются собственные средства просмотра файлов.</p>\n<ul class=\"content__list\">\n<li><code>fixedPollingInterval</code>: см выше.</li>\n<li><code>priorityPollingInterval</code>[ПО УМОЛЧАНИЮ]: см выше.</li>\n<li><code>dynamicPriorityPolling</code>: см выше.</li>\n</ul>\n</li>\n<li>\n<p class=\"content__paragraph\"><code>synchronousWatchDirectory</code>: Отключить отложенное наблюдение за каталогами.</p>\n<ul class=\"content__list\">\n<li><code>true</code></li>\n<li><code>false</code>[ПО УМОЛЧАНИЮ]</li>\n</ul>\n</li>\n</ul>","commitInfoAll":[{"committedDate":"2020-08-31T14:35:57Z","message":"fix win heading.","messageHeadline":"fix win heading.","pushedDate":"2020-08-31T14:36:17Z","authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars.githubusercontent.com/u/31518738?v=4"}},{"committedDate":"2021-03-22T08:08:33Z","message":"fixed grammar and syntax errors in the text","messageHeadline":"fixed grammar and syntax errors in the text","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"mindyourlifeguide","bio":"Front-end developer","location":"Kyiv, Ukraine","avatarUrl":"https://avatars.githubusercontent.com/u/35348648?u=d52456eed154db660092623fe6e0ebb516677a95&v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.8/Новая конфигурационная группа параметров watchOptions/content.md"},{"mmp":"3.8","id":"","version":"3.8","innovationName":"Новый флаг --assumeChangesOnlyAffectDirectDependencies","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"Novyi_flag_--assumeChangesOnlyAffectDirectDependencies","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"Novyi_flag_--assumeChangesOnlyAffectDirectDependencies\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Новый флаг --assumeChangesOnlyAffectDirectDependencies</span></h2>\n<div class=\"content__tag-bar\"></div>\n<p class=\"content__paragraph\">С помощью таких опций компилятора как <code>--watch</code> и <code>--incremental</code> можно значительно сократить время сборки проекта. Напомню, что первый активирует наблюдение за файлами, а второй устанавливает связи между ними при помощи генерации файла с метаинформацией .tsbuildinfo.</p>\n<p class=\"content__paragraph\">Но на очень больших проектах этих мер по сокращению время сборки довольно недостаточно. Поэтому многие разработчики высказываются за сокращение время сборки в угоду точности проверок изменений. Итогом подобных рассуждений стал новый флаг компилятора <code>--assumeChangesOnlyAffectDirectDependencies</code> при активации которой компилятор не будет перепроверять\\перестраивать файлы, которые на основе метаинформации считаются затронутыми. Вместо этого будут пepeпpoвepятьcя\\перестраиваться только непосредственно изменённые файлы и файлы их импортирующие.</p>\n<p class=\"content__paragraph\">Представьте, что <code>fileA.ts</code> импортирует <code>fileB.ts</code>, который импортирует <code>fileC.ts</code>, который импортирует <code>fileD.td</code>.</p>\n<p class=\"content__paragraph\">При активном режиме <code>--watch</code> изменения в файле <code>fileD.ts</code> означает, что как минимум будут проверены <code>fileC.ts</code>, <code>fileB.ts</code> и <code>fileA.ts</code>. При активной опцией <code>--assumeChangesOnlyAffectDirectDependencies</code> проверке подвергнется лишь <code>fileA.ts</code> и <code>fileB.ts</code>.</p>\n<p class=\"content__paragraph\">Как отмечают первые испытатели, данное нововведение в некоторых случаях сократило время сборки в 14 раз, что можно назвать очень значительным, когда компиляция длится четверть минуты.</p>","commitInfoAll":[{"committedDate":"2020-08-31T14:35:57Z","message":"fix win heading.","messageHeadline":"fix win heading.","pushedDate":"2020-08-31T14:36:17Z","authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars.githubusercontent.com/u/31518738?v=4"}},{"committedDate":"2021-03-22T08:08:33Z","message":"fixed grammar and syntax errors in the text","messageHeadline":"fixed grammar and syntax errors in the text","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"mindyourlifeguide","bio":"Front-end developer","location":"Kyiv, Ukraine","avatarUrl":"https://avatars.githubusercontent.com/u/35348648?u=d52456eed154db660092623fe6e0ebb516677a95&v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.8/Новый флаг --assumeChangesOnlyAffectDirectDependencies/content.md"},{"mmp":"3.8","id":"","version":"3.8","innovationName":"Модификаторы JSDocs","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"Modifikatory_JSDocs","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"Modifikatory_JSDocs\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Модификаторы JSDocs</span></h2>\n<div class=\"content__tag-bar\"></div>\n<p class=\"content__paragraph\">Компиляция <em>.js</em> файлов доступная за флагом <code>allowJs</code> была бы не эффективной если бы отсутствовало аннотирование <em>JavaScript</em> кода при помощи <em>JSDoc комментариев</em> активируемых флагом <code>checkJs</code> или <em>комментарной директивой</em> <code>// @ts-check</code>. Чтобы повысить эффективность данного механизма были добавлены новые <em>JSDoc</em> директивы. Так компилятор <em>TypeScript</em> получил поддержку модифицирующих директив как <code>@public</code>, <code>@private</code> и <code>@protected</code>, чье поведение полностью соответствует поведению одноименных модификаторов из <em>TypeScript</em>. Кроме того, без изменений остался список <em>членов класса</em> к которым эти модификаторы могут быть применены (<em>поля</em>, <em>свойства</em>, <em>методы</em> как экземпляра, так и самого класса).</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_js\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">js</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**@public */</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>public <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/**@private */</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>private <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/**@protected */</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>protected <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**@private */</span>\n    <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_js\"></div>\n</div>\n<p class=\"content__paragraph\">Помимо этого также был добавлен модификатор <code>/** @readonly */</code>, чьё поведение также полностью идентичное одноименному модификатору из <em>TypeScript</em>, который к тому же можно совмещать с другими модификаторами.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_js\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">js</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**@readonly */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token constant\">READONLY</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**@protected @readonly */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token constant\">PROTECTED_READONLY</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_js\"></div>\n</div>","commitInfoAll":[{"committedDate":"2020-09-08T11:53:53Z","message":"book(технические изменения (link, md, т.п.)): change code wrapper\n\nchange code wrapper from ~ to ` and from typescript to ts","messageHeadline":"book(технические изменения (link, md, т.п.)): change code wrapper","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars.githubusercontent.com/u/31518738?v=4"}},{"committedDate":"2021-03-22T08:08:33Z","message":"fixed grammar and syntax errors in the text","messageHeadline":"fixed grammar and syntax errors in the text","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"mindyourlifeguide","bio":"Front-end developer","location":"Kyiv, Ukraine","avatarUrl":"https://avatars.githubusercontent.com/u/35348648?u=d52456eed154db660092623fe6e0ebb516677a95&v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.8/Модификаторы JSDocs/content.md"},{"mmp":"3.8","id":"","version":"3.8","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Более строгие проверки объединений имеющих с индексной сигнатурой","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Bolee_strogie_proverki_obedinenii_imeushchih_s_indeksnoi_signaturoi","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"[KRITIChESKOE_IZMENENIE]_Bolee_strogie_proverki_obedinenii_imeushchih_s_indeksnoi_signaturoi\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Более строгие проверки объединений имеющих с индексной сигнатурой</span></h2>\n<div class=\"content__tag-bar\"></div>\n<p class=\"content__paragraph\">До текущей версии типу объединения включающего тип с индексной сигнатурой было возможно присвоить значение имеющее поля неудовлетворяющие этой индексной сигнатуре. Начиная с версии <code>3.8</code> это поведение стало строже и описанный выше сценарий считается ошибочным.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> o0<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> field<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * [&lt; v3.8] Ok\n * [>= v3.8] Error\n * Type 'string' is not assignable to type 'number'.ts(2322)\n */</span>\no0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> field<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> dynamicKey<span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">let</span> o1<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * [&lt; v3.8] Ok\n * [>= v3.8] Error\n * Type 'string' is not assignable to type 'number'.ts(2322)\n */</span>\no1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> dynamicKey<span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","commitInfoAll":[{"committedDate":"2020-09-26T09:47:27Z","message":"win(изменение): fix heading space\n\nfix heading space","messageHeadline":"win(изменение): fix heading space","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.8/\\[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ\\] Более строгие проверки объединений имеющих с индексной сигнатурой/content.md"},{"mmp":"3.8","id":"","version":"3.8","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Тип object в JSDoc при активном флаге --noImplicitAny больше не расценивается как any","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Tip_object_v_JSDoc_pri_aktivnom_flage_--noImplicitAny_bolshe_ne_rascenivaetsya_kak_any","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"[KRITIChESKOE_IZMENENIE]_Tip_object_v_JSDoc_pri_aktivnom_flage_--noImplicitAny_bolshe_ne_rascenivaetsya_kak_any\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Тип object в JSDoc при активном флаге --noImplicitAny больше не расценивается как any</span></h2>\n<div class=\"content__tag-bar\"></div>\n<p class=\"content__paragraph\">До текущей версии тип <code>object</code> указанный в <em>JSDoc</em> при активном флаге <code>--noImplicitAny</code> расценивался <em>TypeScript</em> как тип <code>any</code>. Начиная с текущей версии поведение типа <code>object</code> синхронизировано с поведением реализуемым <em>TypeScript</em>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_js\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">js</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param p0 {Object}\n * @param p1 {object}\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p0<span class=\"token punctuation\">,</span> p1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_js\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// --noImplicitAny: true</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./jsdocs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * [&lt;  3.8] f(p0: Object, p1: any): void\n * [>= 3.8] f(p0: Object, p1: object): void\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","commitInfoAll":[{"committedDate":"2020-09-26T09:47:27Z","message":"win(изменение): fix heading space\n\nfix heading space","messageHeadline":"win(изменение): fix heading space","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars.githubusercontent.com/u/31518738?v=4"}},{"committedDate":"2021-03-21T11:32:13Z","message":"fixed grammar and syntax errors in the text, corrected links","messageHeadline":"fixed grammar and syntax errors in the text, corrected links","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"mindyourlifeguide","bio":"Front-end developer","location":"Kyiv, Ukraine","avatarUrl":"https://avatars.githubusercontent.com/u/35348648?u=d52456eed154db660092623fe6e0ebb516677a95&v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.8/\\[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ\\] Тип object в JSDoc при активном флаге --noImplicitAny больше не расценивается как any/content.md"}]},"winTocTree":[{"id":"0","isCollapse":false,"index":0,"data":{"releaseHistory":[{"version":"3.3","dateRelease":"january 31, 2019","datePublication":"January 31, 2019"}],"mmp":"3.3","innovations":[{"id":"","version":"3.3","innovationName":"Повышение производительности сборки для команды --build --watch","dateRelease":"January 31, 2019","datePublication":"January 31, 2019","tags":[],"path":"Povyshenie_proizvoditelnosti_sborki_dlya_komandy_--build_--watch"},{"id":"","version":"3.3","innovationName":"Улучшение поведения для типов Union указанных в качестве параметров функции","dateRelease":"January 31, 2019","datePublication":"January 31, 2019","tags":[],"path":"Uluchshenie_povedeniya_dlya_tipov_Union_ukazannyh_v_kachestve_parametrov_funkcii"}]}},{"id":"1","isCollapse":false,"index":1,"data":{"releaseHistory":[{"version":"3.4","dateRelease":"March 29, 2019","datePublication":"March 29, 2019"}],"mmp":"3.4","innovations":[{"id":"","version":"3.4","innovationName":"Опции компилятора --tsBuildInfoFile","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"Opcii_kompilyatora_--tsBuildInfoFile"},{"id":"","version":"3.4","innovationName":"Опции компилятора --incremental","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"Opcii_kompilyatora_--incremental"},{"id":"","version":"3.4","innovationName":"Массивоподобные readonly типы","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"Massivopodobnye_readonly_tipy"},{"id":"","version":"3.4","innovationName":"Расширенный тип ReadonlyArray","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"Rasshirennyi_tip_ReadonlyArray"},{"id":"","version":"3.4","innovationName":"Привидение к константе (const assertion)","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"Prividenie_k_konstante_(const_assertion)"},{"id":"","version":"3.4","innovationName":"Проверка типов для globalThis","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"Proverka_tipov_dlya_globalThis"}]}},{"id":"2","isCollapse":false,"index":2,"data":{"releaseHistory":[{"version":"3.5","dateRelease":"May 29, 2019","datePublication":"May 29, 2019"}],"mmp":"3.5","innovations":[{"id":"","version":"3.5","innovationName":"Вспомогательный тип Omit","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"Vspomogatelnyi_tip_Omit"},{"id":"","version":"3.5","innovationName":"Улучшение механизма проверки избыточных полей в объединённых типах (Union types)","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"Uluchshenie_mehanizma_proverki_izbytochnyh_polei_v_obedinennyh_tipah_(Union_types)"},{"id":"","version":"3.5","innovationName":"Введение нового флага --allowUmdGlobalAccess","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"Vvedenie_novogo_flaga_--allowUmdGlobalAccess"},{"id":"","version":"3.5","innovationName":"Улучшение механизма проверки объединенных типов","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"Uluchshenie_mehanizma_proverki_obedinennyh_tipov"},{"id":"","version":"3.5","innovationName":"Улучшение механизма вывода типа высшего порядка для обобщенных конструкторов","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"Uluchshenie_mehanizma_vyvoda_tipa_vysshego_poryadka_dlya_obobshchennyh_konstruktorov"},{"id":"","version":"3.5","innovationName":"Неявное ограничение обобщенных параметров типом unknown","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"Neyavnoe_ogranichenie_obobshchennyh_parametrov_tipom_unknown"},{"id":"","version":"3.5","innovationName":"Изменение правил для типа unknown и индексной сигнатуре","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"Izmenenie_pravil_dlya_tipa_unknown_i_indeksnoi_signature"},{"id":"","version":"3.5","innovationName":"Изменение логики для Object.keys для версии es5","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"Izmenenie_logiki_dlya_Object.keys_dlya_versii_es5"}]}},{"id":"3","isCollapse":false,"index":3,"data":{"releaseHistory":[{"version":"3.6","dateRelease":"August 28, 2019","datePublication":"August 28, 2019"}],"mmp":"3.6","innovations":[{"id":"","version":"3.6","innovationName":"Повышение типобезопасности генераторов","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"Povyshenie_tipobezopasnosti_generatorov"},{"id":"","version":"3.6","innovationName":"Добавление хелпера имитирующего механизм spread array при компиляции в ecmascript ниже версии 6 при неактивном флаге --downlevelIteration","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"Dobavlenie_helpera_imitiruushchego_mehanizm_spread_array_pri_kompilyacii_v_ecmascript_nije_versii_6_pri_neaktivnom_flage_--downlevelIteration"},{"id":"","version":"3.6","innovationName":"Расширение системы типов типами представляющими структуры данных только для чтения","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"Rasshirenie_sistemy_tipov_tipami_predstavlyaushchimi_struktury_dannyh_tolko_dlya_chteniya"},{"id":"","version":"3.6","innovationName":"Строковой идентификатор функции-конструктора","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"Strokovoi_identifikator_funkcii-konstruktora"},{"id":"","version":"3.6","innovationName":"Расширение вывода об ошибках при работе с Promise","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"Rasshirenie_vyvoda_ob_oshibkah_pri_rabote_s_Promise"},{"id":"","version":"3.6","innovationName":"Слияние одноименных классов и функций из окружающего контекста","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"Sliyanie_odnoimennyh_klassov_i_funkcii_iz_okrujaushchego_konteksta"},{"id":"","version":"3.6","innovationName":"Добавлена поддержка Unicode для идентификаторов","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"Dobavlena_podderjka_Unicode_dlya_identifikatorov"},{"id":"","version":"3.6","innovationName":"Поддержка import.meta для SystemJS","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"Podderjka_import.meta_dlya_SystemJS"},{"id":"","version":"3.6","innovationName":"get и set в окружающем контексте","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"get_i_set_v_okrujaushchem_kontekste"},{"id":"","version":"3.6","innovationName":"Api для поддержки --build и --incremental","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"Api_dlya_podderjki_--build_i_--incremental"},{"id":"","version":"3.6","innovationName":"Интеллектуальное определение синтаксиса авто-импорта","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"Intellektualnoe_opredelenie_sintaksisa_avto-importa"}]}},{"id":"4","isCollapse":false,"index":4,"data":{"releaseHistory":[{"version":"3.7","dateRelease":"November 5, 2019","datePublication":"November 5, 2019"},{"version":"3.7-rc","dateRelease":"November 4, 2019","datePublication":"November 5, 2019"},{"version":"3.7-beta","dateRelease":"November 3, 2019","datePublication":"November 5, 2019"},{"version":"3.7-alpha","dateRelease":"November 2, 2019","datePublication":"November 5, 2019"}],"mmp":"3.7","innovations":[{"id":"","version":"3.7-rc","innovationName":"Оператор опциональной последовательности (?.)","dateRelease":"November 4, 2019","datePublication":"November 5, 2019","tags":["исправление","Критическое изменение","Компилятор"],"path":"Operator_opcionalnoi_posledovatelnosti_(?.)"},{"id":"","version":"3.7-rc","innovationName":"Оператор объединения со значением null (??)","dateRelease":"November 4, 2019","datePublication":"November 5, 2019","tags":["высокая ожидаемость"],"path":"Operator_obedineniya_so_znacheniem_null_(??)"},{"id":"","version":"3.7-rc","innovationName":"Утверждение в сигнатуре (Signature Assertion)","dateRelease":"November 4, 2019","datePublication":"November 5, 2019","tags":["важно"],"path":"Utverjdenie_v_signature_(Signature_Assertion)"},{"id":"","version":"3.7-rc","innovationName":"Улучшена поддержка для типа never возвращаемого из функций","dateRelease":"November 4, 2019","datePublication":"November 5, 2019","tags":["изменение"],"path":"Uluchshena_podderjka_dlya_tipa_never_vozvrashchaemogo_iz_funkcii"},{"id":"","version":"3.7-beta","innovationName":"Проверка не вызванных функций","dateRelease":"November 3, 2019","datePublication":"November 5, 2019","tags":["баг"],"path":"Proverka_ne_vyzvannyh_funkcii"},{"id":"","version":"3.7-beta","innovationName":"Рекурсивность для псевдонимов типов","dateRelease":"November 3, 2019","datePublication":"November 5, 2019","tags":["компилятор"],"path":"Rekursivnost_dlya_psevdonimov_tipov"},{"id":"","version":"3.7-alpha","innovationName":"Совместное использование флагов --declaration и --allowJs","dateRelease":"November 2, 2019","datePublication":"November 5, 2019","tags":["директивы"],"path":"Sovmestnoe_ispolzovanie_flagov_--declaration_i_--allowJs"},{"id":"","version":"3.7-alpha","innovationName":"@ts-nocheck в TypeScript файлах","dateRelease":"November 2, 2019","datePublication":"November 5, 2019","tags":["общее"],"path":"@ts-nocheck_v_TypeScript_failah"}]}},{"id":"5","isCollapse":false,"index":5,"data":{"releaseHistory":[{"version":"3.8","dateRelease":"February 20, 2020","datePublication":"February 20, 2020"}],"mmp":"3.8","innovations":[{"id":"","version":"3.8","innovationName":"Импорт и экспорт только типа и флаг --importsNotUsedAsValues","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"Import_i_eksport_tolko_tipa_i_flag_--importsNotUsedAsValues"},{"id":"","version":"3.8","innovationName":"Закрытые поля ECMAScript","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"Zakrytye_polya_ECMAScript"},{"id":"","version":"3.8","innovationName":"await высшего уровня","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"await_vysshego_urovnya"},{"id":"","version":"3.8","innovationName":"Реализация новой формы ре-экспорта","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"Realizaciya_novoi_formy_re-eksporta"},{"id":"","version":"3.8","innovationName":"Новая конфигурационная группа параметров watchOptions","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"Novaya_konfiguracionnaya_gruppa_parametrov_watchOptions"},{"id":"","version":"3.8","innovationName":"Новый флаг --assumeChangesOnlyAffectDirectDependencies","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"Novyi_flag_--assumeChangesOnlyAffectDirectDependencies"},{"id":"","version":"3.8","innovationName":"Модификаторы JSDocs","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"Modifikatory_JSDocs"},{"id":"","version":"3.8","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Более строгие проверки объединений имеющих с индексной сигнатурой","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Bolee_strogie_proverki_obedinenii_imeushchih_s_indeksnoi_signaturoi"},{"id":"","version":"3.8","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Тип object в JSDoc при активном флаге --noImplicitAny больше не расценивается как any","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Tip_object_v_JSDoc_pri_aktivnom_flage_--noImplicitAny_bolshe_ne_rascenivaetsya_kak_any"}]}},{"id":"6","isCollapse":false,"index":6,"data":{"releaseHistory":[{"version":"3.9","dateRelease":"May 12, 2020","datePublication":"May 12, 2020"}],"mmp":"3.9","innovations":[{"id":"","version":"3.9","innovationName":"Улучшение вывода типа для Promise.all","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"Uluchshenie_vyvoda_tipa_dlya_Promise.all"},{"id":"","version":"3.9","innovationName":"Сокращение скорости компиляции","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"Sokrashchenie_skorosti_kompilyacii"},{"id":"","version":"3.9","innovationName":"Комментарная директива @ts-expect-error","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"Kommentarnaya_direktiva_@ts-expect-error"},{"id":"","version":"3.9","innovationName":"Проверка вызова функции в тернарном условном операторе","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"Proverka_vyzova_funkcii_v_ternarnom_uslovnom_operatore"},{"id":"","version":"3.9","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменение поведения для оператора Non-Null при совместном использовании с оператором опциональной цепочки","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Izmenenie_povedeniya_dlya_operatora_Non-Null_pri_sovmestnom_ispolzovanii_s_operatorom_opcionalnoi_cepochki"},{"id":"","version":"3.9","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Возникновение ошибки при наличии в строке закрывающей фигурной или угловатой скобки в файлах с расширением TSX","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Vozniknovenie_oshibki_pri_nalichii_v_stroke_zakryvaushchei_figurnoi_ili_uglovatoi_skobki_v_failah_s_rasshireniem_TSX"},{"id":"","version":"3.9","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Повышение уровня проверки необязательных полей для типов определяющих тип пересечение","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Povyshenie_urovnya_proverki_neobyazatelnyh_polei_dlya_tipov_opredelyaushchih_tip_peresechenie"},{"id":"","version":"3.9","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Определение типа пересечения дискриминантными полями","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Opredelenie_tipa_peresecheniya_diskriminantnymi_polyami"},{"id":"","version":"3.9","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Параметр типа расширяющий тип any больше не наследует его характеристики","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Parametr_tipa_rasshiryaushchii_tip_any_bolshe_ne_nasleduet_ego_harakteristiki"},{"id":"","version":"3.9","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] get и set больше не перечисляемы","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_get_i_set_bolshe_ne_perechislyaemy"},{"id":"","version":"3.9","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] export * теперь всегда включается в сборку","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_export_*_teper_vsegda_vkluchaetsya_v_sborku"}]}},{"id":"7","isCollapse":false,"index":7,"data":{"releaseHistory":[{"version":"4.0","dateRelease":"August 20, 2020","datePublication":"August 20, 2020"}],"mmp":"4.0","innovations":[{"id":"","version":"4.0","innovationName":"Вариативный кортеж","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"Variativnyi_kortej"},{"id":"","version":"4.0","innovationName":"Помеченные элементы кортежа","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"Pomechennye_elementy_korteja"},{"id":"","version":"4.0","innovationName":"Операторы присваивания короткого замыкания","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"Operatory_prisvaivaniya_korotkogo_zamykaniya"},{"id":"","version":"4.0","innovationName":"Вывод типов для полей класса по параметрам конструктора","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"Vyvod_tipov_dlya_polei_klassa_po_parametram_konstruktora"},{"id":"","version":"4.0","innovationName":"unknown как тип исключения блока catch","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"unknown_kak_tip_isklucheniya_bloka_catch"},{"id":"","version":"4.0","innovationName":"--noEmit совмещенный с --incremental","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"--noEmit_sovmeshchennyi_s_--incremental"},{"id":"","version":"4.0","innovationName":"Пользовательская фабрика jsx фрагментов","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"Polzovatelskaya_fabrika_jsx_fragmentov"},{"id":"","version":"4.0","innovationName":"Добавление комментарной директивы @deprecated","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"Dobavlenie_kommentarnoi_direktivy_@deprecated"},{"id":"","version":"4.0","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменение lib.d.ts","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Izmenenie_lib.d.ts"},{"id":"","version":"4.0","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Переопределение аксессоров полем и наоборот теперь является ошибкой","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Pereopredelenie_aksessorov_polem_i_naoborot_teper_yavlyaetsya_oshibkoi"},{"id":"","version":"4.0","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Операнды для delete должны быть необязательными","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Operandy_dlya_delete_doljny_byt_neobyazatelnymi"},{"id":"","version":"4.0","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменение фабричного api Nodejs","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"[KRITIChESKOE_IZMENENIE]_Izmenenie_fabrichnogo_api_Nodejs"}]}},{"id":"8","isCollapse":false,"index":8,"data":{"releaseHistory":[{"version":"4.1@beta","dateRelease":"September 18, 2020","datePublication":"September 18, 2020"},{"version":"4.1@beta_1","dateRelease":"September 18, 2020","datePublication":"October 08, 2020"}],"colors":{"bookCoverColors":{"--color_light":"#fff","--color_middle-lite":"#93cf94","--color_accent":"#aff933","--color_ambient":"#a12d2d"},"bookUpdateCurrentVersionCoverColors":{"--color":"#265589"}},"mmp":"4.1","innovations":[{"id":"","version":"4.1@beta_1","innovationName":"Изменение механизма проверки индексной сигнатуры","dateRelease":"September 18, 2020","datePublication":"October 08, 2020","tags":["Нововведение"],"path":"Izmenenie_mehanizma_proverki_indeksnoi_signatury"},{"id":"","version":"4.1@beta","innovationName":"Шаблонный литеральный строковый тип","dateRelease":"September 18, 2020","datePublication":"September 18, 2020","tags":["Нововведение"],"path":"Shablonnyi_literalnyi_strokovyi_tip"},{"id":"","version":"4.1@beta","innovationName":"Переопределение ключей в сопоставленных типах","dateRelease":"September 18, 2020","datePublication":"September 18, 2020","tags":["Нововведение"],"path":"Pereopredelenie_kluchei_v_sopostavlennyh_tipah"},{"id":"","version":"4.1@beta","innovationName":"Рекурсивные условные типы","dateRelease":"September 18, 2020","datePublication":"September 18, 2020","tags":["Изменение"],"path":"Rekursivnye_uslovnye_tipy"},{"id":"","version":"4.1@beta","innovationName":"paths без baseUrl","dateRelease":"September 18, 2020","datePublication":"September 18, 2020","tags":["Изменение"],"path":"paths_bez_baseUrl"},{"id":"","version":"4.1@beta","innovationName":"checkJs не требует активации allowJs","dateRelease":"September 18, 2020","datePublication":"September 18, 2020","tags":["Изменение"],"path":"checkJs_ne_trebuet_aktivacii_allowJs"},{"id":"","version":"4.1@beta","innovationName":"jsx фабрики для React 17","dateRelease":"September 18, 2020","datePublication":"September 18, 2020","tags":["Изменение"],"path":"jsx_fabriki_dlya_React_17"},{"id":"","version":"4.1@beta","innovationName":"Поддержка тега @see для JSDoc","dateRelease":"September 18, 2020","datePublication":"September 18, 2020","tags":["Изменение"],"path":"Podderjka_tega_@see_dlya_JSDoc"},{"id":"","version":"4.1@beta","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] abstract больше не совместим с async","dateRelease":"September 18, 2020","datePublication":"September 18, 2020","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_abstract_bolshe_ne_sovmestim_s_async"},{"id":"","version":"4.1@beta","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] any и unknown доминируют в ложных позициях","dateRelease":"September 18, 2020","datePublication":"September 18, 2020","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_any_i_unknown_dominiruut_v_lojnyh_poziciyah"},{"id":"","version":"4.1@beta","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] --declaration и --outFile требуют имя корневого пакета","dateRelease":"September 18, 2020","datePublication":"September 18, 2020","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_--declaration_i_--outFile_trebuut_imya_kornevogo_paketa"},{"id":"","version":"4.1@beta","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] параметры resolve теперь обязательные","dateRelease":"September 18, 2020","datePublication":"September 18, 2020","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_parametry_resolve_teper_obyazatelnye"}]}},{"id":"9","isCollapse":false,"index":9,"data":{"releaseHistory":[{"version":"4.2","dateRelease":"February 23, 2021","datePublication":"March 4, 2021"}],"colors":{"bookCoverColors":{"--color_light":"#fff","--color_middle-lite":"#93cf94","--color_accent":"#aff933","--color_ambient":"#a12d2d"},"bookUpdateCurrentVersionCoverColors":{"--color":"#265589"}},"mmp":"4.2","innovations":[{"id":"","version":"4.2","innovationName":"Изменение поведения указания остаточных типов в кортеже","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Изменение"],"path":"Izmenenie_povedeniya_ukazaniya_ostatochnyh_tipov_v_korteje"},{"id":"","version":"4.2","innovationName":"Изменение вывода для псевдонимов типов","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Улучшение"],"path":"Izmenenie_vyvoda_dlya_psevdonimov_tipov"},{"id":"","version":"4.2","innovationName":"Ужесточение правил проверки для in-оператора","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Нововведение"],"path":"Ujestochenie_pravil_proverki_dlya_in-operatora"},{"id":"","version":"4.2","innovationName":"Новый флаг --noPropertyAccessFromIndexSignature","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Нововведение"],"path":"Novyi_flag_--noPropertyAccessFromIndexSignature"},{"id":"","version":"4.2","innovationName":"Модификатор abstract для описания типа конструктора","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Нововведение"],"path":"Modifikator_abstract_dlya_opisaniya_tipa_konstruktora"},{"id":"","version":"4.2","innovationName":"Понимание структуры проекта с флагом --explainFiles","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Нововведение"],"path":"Ponimanie_struktury_proekta_s_flagom_--explainFiles"},{"id":"","version":"4.2","innovationName":"Проверка вызова функций в логических выражениях","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Улучшение"],"path":"Proverka_vyzova_funkcii_v_logicheskih_vyrajeniyah"},{"id":"","version":"4.2","innovationName":"Смягчение правил между необязательными членами и строковых индексных сигнатур","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Изменение"],"path":"Smyagchenie_pravil_mejdu_neobyazatelnymi_chlenami_i_strokovyh_indeksnyh_signatur"},{"id":"","version":"4.2","innovationName":"Деструктурированные переменные можно явно пометить как неиспользуемые","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Нововведение"],"path":"Destrukturirovannye_peremennye_mojno_yavno_pometit_kak_neispolzuemye"},{"id":"","version":"4.2","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Обновление lib.d.ts","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_Obnovlenie_lib.d.ts"},{"id":"","version":"4.2","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] noImplicitAny и новое поведение для оператора yield тип которого не может быть установлен явно","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_noImplicitAny_i_novoe_povedenie_dlya_operatora_yield_tip_kotorogo_ne_mojet_byt_ustanovlen_yavno"},{"id":"","version":"4.2","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Проверка вызова функций в условных операторах приурочена к флагу --strictNullChecks","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_Proverka_vyzova_funkcii_v_uslovnyh_operatorah_priurochena_k_flagu_--strictNullChecks"},{"id":"","version":"4.2","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Лимит для механизма spread в кортежах","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_Limit_dlya_mehanizma_spread_v_kortejah"},{"id":"","version":"4.2","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменение правил для оператора in","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_Izmenenie_pravil_dlya_operatora_in"},{"id":"","version":"4.2","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Расширение .d.ts теперь нельзя использовать в путях импорта","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_Rasshirenie_.d.ts_teper_nelzya_ispolzovat_v_putyah_importa"},{"id":"","version":"4.2","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменение типа параметра функции обратного вызова передаваемой в качестве аргумента функции visitNode","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_Izmenenie_tipa_parametra_funkcii_obratnogo_vyzova_peredavaemoi_v_kachestve_argumenta_funkcii_visitNode"},{"id":"","version":"4.2","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Отмена поведения литерального вывода шаблона из версии 4.2@beta","dateRelease":"February 23, 2021","datePublication":"March 4, 2021","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_Otmena_povedeniya_literalnogo_vyvoda_shablona_iz_versii_4.2@beta"}]}},{"id":"10","isCollapse":false,"index":10,"data":{"releaseHistory":[{"version":"4.3@beta","dateRelease":"April 1, 2021","datePublication":"April 6, 2021"}],"colors":{"bookCoverColors":{"--color_light":"#fff","--color_middle-lite":"#c93737","--color_accent":"#e6e63a","--color_ambient":"#ff9443"},"bookUpdateCurrentVersionCoverColors":{"--color":"#265589"}},"mmp":"4.3","innovations":[{"id":"","version":"4.3@beta","innovationName":"Отдельные типы аксеcсоров","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Улучшение"],"path":"Otdelnye_tipy_aksecsorov"},{"id":"","version":"4.3@beta","innovationName":"Модификатор override и флаг --noImplicitOverride","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Нововведение"],"path":"Modifikator_override_i_flag_--noImplicitOverride"},{"id":"","version":"4.3@beta","innovationName":"Улучшение работы шаблонного строкового типа","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Улучшение"],"path":"Uluchshenie_raboty_shablonnogo_strokovogo_tipa"},{"id":"","version":"4.3@beta","innovationName":"Изменение поведения для объекта Promise в условных выражениях","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Изменение"],"path":"Izmenenie_povedeniya_dlya_obekta_Promise_v_uslovnyh_vyrajeniyah"},{"id":"","version":"4.3@beta","innovationName":"Индексные сигнатуры класса","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Улучшение"],"path":"Indeksnye_signatury_klassa"},{"id":"","version":"4.3@beta","innovationName":"Расширение возможностей ECMAScript приватного модификатора и флаг --useDefineForClassFields","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Улучшение"],"path":"Rasshirenie_vozmojnostei_ECMAScript_privatnogo_modifikatora_i_flag_--useDefineForClassFields"},{"id":"","version":"4.3@beta","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменения в lib.d.ts","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_Izmeneniya_v_lib.d.ts"},{"id":"","version":"4.3@beta","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Enum больше нельзя сравнивать с произвольными числами","dateRelease":"April 1, 2021","datePublication":"April 6, 2021","tags":["Критическое изменение"],"path":"[KRITIChESKOE_IZMENENIE]_Enum_bolshe_nelzya_sravnivat_s_proizvolnymi_chislami"}]}}],"pageNavDataAll":[{"name":"3.3","path":"3.3","sections":[{"name":"Повышение производительности сборки для команды --build --watch","path":"Povyshenie_proizvoditelnosti_sborki_dlya_komandy_--build_--watch","data":{"version":"3.3"}},{"name":"Улучшение поведения для типов Union указанных в качестве параметров функции","path":"Uluchshenie_povedeniya_dlya_tipov_Union_ukazannyh_v_kachestve_parametrov_funkcii","data":{"version":"3.3"}}]},{"name":"3.4","path":"3.4","sections":[{"name":"Опции компилятора --tsBuildInfoFile","path":"Opcii_kompilyatora_--tsBuildInfoFile","data":{"version":"3.4"}},{"name":"Опции компилятора --incremental","path":"Opcii_kompilyatora_--incremental","data":{"version":"3.4"}},{"name":"Массивоподобные readonly типы","path":"Massivopodobnye_readonly_tipy","data":{"version":"3.4"}},{"name":"Расширенный тип ReadonlyArray","path":"Rasshirennyi_tip_ReadonlyArray","data":{"version":"3.4"}},{"name":"Привидение к константе (const assertion)","path":"Prividenie_k_konstante_(const_assertion)","data":{"version":"3.4"}},{"name":"Проверка типов для globalThis","path":"Proverka_tipov_dlya_globalThis","data":{"version":"3.4"}}]},{"name":"3.5","path":"3.5","sections":[{"name":"Вспомогательный тип Omit","path":"Vspomogatelnyi_tip_Omit","data":{"version":"3.5"}},{"name":"Улучшение механизма проверки избыточных полей в объединённых типах (Union types)","path":"Uluchshenie_mehanizma_proverki_izbytochnyh_polei_v_obedinennyh_tipah_(Union_types)","data":{"version":"3.5"}},{"name":"Введение нового флага --allowUmdGlobalAccess","path":"Vvedenie_novogo_flaga_--allowUmdGlobalAccess","data":{"version":"3.5"}},{"name":"Улучшение механизма проверки объединенных типов","path":"Uluchshenie_mehanizma_proverki_obedinennyh_tipov","data":{"version":"3.5"}},{"name":"Улучшение механизма вывода типа высшего порядка для обобщенных конструкторов","path":"Uluchshenie_mehanizma_vyvoda_tipa_vysshego_poryadka_dlya_obobshchennyh_konstruktorov","data":{"version":"3.5"}},{"name":"Неявное ограничение обобщенных параметров типом unknown","path":"Neyavnoe_ogranichenie_obobshchennyh_parametrov_tipom_unknown","data":{"version":"3.5"}},{"name":"Изменение правил для типа unknown и индексной сигнатуре","path":"Izmenenie_pravil_dlya_tipa_unknown_i_indeksnoi_signature","data":{"version":"3.5"}},{"name":"Изменение логики для Object.keys для версии es5","path":"Izmenenie_logiki_dlya_Object.keys_dlya_versii_es5","data":{"version":"3.5"}}]},{"name":"3.6","path":"3.6","sections":[{"name":"Повышение типобезопасности генераторов","path":"Povyshenie_tipobezopasnosti_generatorov","data":{"version":"3.6"}},{"name":"Добавление хелпера имитирующего механизм spread array при компиляции в ecmascript ниже версии 6 при неактивном флаге --downlevelIteration","path":"Dobavlenie_helpera_imitiruushchego_mehanizm_spread_array_pri_kompilyacii_v_ecmascript_nije_versii_6_pri_neaktivnom_flage_--downlevelIteration","data":{"version":"3.6"}},{"name":"Расширение системы типов типами представляющими структуры данных только для чтения","path":"Rasshirenie_sistemy_tipov_tipami_predstavlyaushchimi_struktury_dannyh_tolko_dlya_chteniya","data":{"version":"3.6"}},{"name":"Строковой идентификатор функции-конструктора","path":"Strokovoi_identifikator_funkcii-konstruktora","data":{"version":"3.6"}},{"name":"Расширение вывода об ошибках при работе с Promise","path":"Rasshirenie_vyvoda_ob_oshibkah_pri_rabote_s_Promise","data":{"version":"3.6"}},{"name":"Слияние одноименных классов и функций из окружающего контекста","path":"Sliyanie_odnoimennyh_klassov_i_funkcii_iz_okrujaushchego_konteksta","data":{"version":"3.6"}},{"name":"Добавлена поддержка Unicode для идентификаторов","path":"Dobavlena_podderjka_Unicode_dlya_identifikatorov","data":{"version":"3.6"}},{"name":"Поддержка import.meta для SystemJS","path":"Podderjka_import.meta_dlya_SystemJS","data":{"version":"3.6"}},{"name":"get и set в окружающем контексте","path":"get_i_set_v_okrujaushchem_kontekste","data":{"version":"3.6"}},{"name":"Api для поддержки --build и --incremental","path":"Api_dlya_podderjki_--build_i_--incremental","data":{"version":"3.6"}},{"name":"Интеллектуальное определение синтаксиса авто-импорта","path":"Intellektualnoe_opredelenie_sintaksisa_avto-importa","data":{"version":"3.6"}}]},{"name":"3.7","path":"3.7","sections":[{"name":"Оператор опциональной последовательности (?.)","path":"Operator_opcionalnoi_posledovatelnosti_(?.)","data":{"version":"3.7-rc"}},{"name":"Оператор объединения со значением null (??)","path":"Operator_obedineniya_so_znacheniem_null_(??)","data":{"version":"3.7-rc"}},{"name":"Утверждение в сигнатуре (Signature Assertion)","path":"Utverjdenie_v_signature_(Signature_Assertion)","data":{"version":"3.7-rc"}},{"name":"Улучшена поддержка для типа never возвращаемого из функций","path":"Uluchshena_podderjka_dlya_tipa_never_vozvrashchaemogo_iz_funkcii","data":{"version":"3.7-rc"}},{"name":"Проверка не вызванных функций","path":"Proverka_ne_vyzvannyh_funkcii","data":{"version":"3.7-beta"}},{"name":"Рекурсивность для псевдонимов типов","path":"Rekursivnost_dlya_psevdonimov_tipov","data":{"version":"3.7-beta"}},{"name":"Совместное использование флагов --declaration и --allowJs","path":"Sovmestnoe_ispolzovanie_flagov_--declaration_i_--allowJs","data":{"version":"3.7-alpha"}},{"name":"@ts-nocheck в TypeScript файлах","path":"@ts-nocheck_v_TypeScript_failah","data":{"version":"3.7-alpha"}}]},{"name":"3.8","path":"3.8","sections":[{"name":"Импорт и экспорт только типа и флаг --importsNotUsedAsValues","path":"Import_i_eksport_tolko_tipa_i_flag_--importsNotUsedAsValues","data":{"version":"3.8"}},{"name":"Закрытые поля ECMAScript","path":"Zakrytye_polya_ECMAScript","data":{"version":"3.8"}},{"name":"await высшего уровня","path":"await_vysshego_urovnya","data":{"version":"3.8"}},{"name":"Реализация новой формы ре-экспорта","path":"Realizaciya_novoi_formy_re-eksporta","data":{"version":"3.8"}},{"name":"Новая конфигурационная группа параметров watchOptions","path":"Novaya_konfiguracionnaya_gruppa_parametrov_watchOptions","data":{"version":"3.8"}},{"name":"Новый флаг --assumeChangesOnlyAffectDirectDependencies","path":"Novyi_flag_--assumeChangesOnlyAffectDirectDependencies","data":{"version":"3.8"}},{"name":"Модификаторы JSDocs","path":"Modifikatory_JSDocs","data":{"version":"3.8"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Более строгие проверки объединений имеющих с индексной сигнатурой","path":"[KRITIChESKOE_IZMENENIE]_Bolee_strogie_proverki_obedinenii_imeushchih_s_indeksnoi_signaturoi","data":{"version":"3.8"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Тип object в JSDoc при активном флаге --noImplicitAny больше не расценивается как any","path":"[KRITIChESKOE_IZMENENIE]_Tip_object_v_JSDoc_pri_aktivnom_flage_--noImplicitAny_bolshe_ne_rascenivaetsya_kak_any","data":{"version":"3.8"}}]},{"name":"3.9","path":"3.9","sections":[{"name":"Улучшение вывода типа для Promise.all","path":"Uluchshenie_vyvoda_tipa_dlya_Promise.all","data":{"version":"3.9"}},{"name":"Сокращение скорости компиляции","path":"Sokrashchenie_skorosti_kompilyacii","data":{"version":"3.9"}},{"name":"Комментарная директива @ts-expect-error","path":"Kommentarnaya_direktiva_@ts-expect-error","data":{"version":"3.9"}},{"name":"Проверка вызова функции в тернарном условном операторе","path":"Proverka_vyzova_funkcii_v_ternarnom_uslovnom_operatore","data":{"version":"3.9"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменение поведения для оператора Non-Null при совместном использовании с оператором опциональной цепочки","path":"[KRITIChESKOE_IZMENENIE]_Izmenenie_povedeniya_dlya_operatora_Non-Null_pri_sovmestnom_ispolzovanii_s_operatorom_opcionalnoi_cepochki","data":{"version":"3.9"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Возникновение ошибки при наличии в строке закрывающей фигурной или угловатой скобки в файлах с расширением TSX","path":"[KRITIChESKOE_IZMENENIE]_Vozniknovenie_oshibki_pri_nalichii_v_stroke_zakryvaushchei_figurnoi_ili_uglovatoi_skobki_v_failah_s_rasshireniem_TSX","data":{"version":"3.9"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Повышение уровня проверки необязательных полей для типов определяющих тип пересечение","path":"[KRITIChESKOE_IZMENENIE]_Povyshenie_urovnya_proverki_neobyazatelnyh_polei_dlya_tipov_opredelyaushchih_tip_peresechenie","data":{"version":"3.9"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Определение типа пересечения дискриминантными полями","path":"[KRITIChESKOE_IZMENENIE]_Opredelenie_tipa_peresecheniya_diskriminantnymi_polyami","data":{"version":"3.9"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Параметр типа расширяющий тип any больше не наследует его характеристики","path":"[KRITIChESKOE_IZMENENIE]_Parametr_tipa_rasshiryaushchii_tip_any_bolshe_ne_nasleduet_ego_harakteristiki","data":{"version":"3.9"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] get и set больше не перечисляемы","path":"[KRITIChESKOE_IZMENENIE]_get_i_set_bolshe_ne_perechislyaemy","data":{"version":"3.9"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] export * теперь всегда включается в сборку","path":"[KRITIChESKOE_IZMENENIE]_export_*_teper_vsegda_vkluchaetsya_v_sborku","data":{"version":"3.9"}}]},{"name":"4.0","path":"4.0","sections":[{"name":"Вариативный кортеж","path":"Variativnyi_kortej","data":{"version":"4.0"}},{"name":"Помеченные элементы кортежа","path":"Pomechennye_elementy_korteja","data":{"version":"4.0"}},{"name":"Операторы присваивания короткого замыкания","path":"Operatory_prisvaivaniya_korotkogo_zamykaniya","data":{"version":"4.0"}},{"name":"Вывод типов для полей класса по параметрам конструктора","path":"Vyvod_tipov_dlya_polei_klassa_po_parametram_konstruktora","data":{"version":"4.0"}},{"name":"unknown как тип исключения блока catch","path":"unknown_kak_tip_isklucheniya_bloka_catch","data":{"version":"4.0"}},{"name":"--noEmit совмещенный с --incremental","path":"--noEmit_sovmeshchennyi_s_--incremental","data":{"version":"4.0"}},{"name":"Пользовательская фабрика jsx фрагментов","path":"Polzovatelskaya_fabrika_jsx_fragmentov","data":{"version":"4.0"}},{"name":"Добавление комментарной директивы @deprecated","path":"Dobavlenie_kommentarnoi_direktivy_@deprecated","data":{"version":"4.0"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменение lib.d.ts","path":"[KRITIChESKOE_IZMENENIE]_Izmenenie_lib.d.ts","data":{"version":"4.0"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Переопределение аксессоров полем и наоборот теперь является ошибкой","path":"[KRITIChESKOE_IZMENENIE]_Pereopredelenie_aksessorov_polem_i_naoborot_teper_yavlyaetsya_oshibkoi","data":{"version":"4.0"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Операнды для delete должны быть необязательными","path":"[KRITIChESKOE_IZMENENIE]_Operandy_dlya_delete_doljny_byt_neobyazatelnymi","data":{"version":"4.0"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменение фабричного api Nodejs","path":"[KRITIChESKOE_IZMENENIE]_Izmenenie_fabrichnogo_api_Nodejs","data":{"version":"4.0"}}]},{"name":"4.1","path":"4.1","sections":[{"name":"Изменение механизма проверки индексной сигнатуры","path":"Izmenenie_mehanizma_proverki_indeksnoi_signatury","data":{"version":"4.1@beta_1"}},{"name":"Шаблонный литеральный строковый тип","path":"Shablonnyi_literalnyi_strokovyi_tip","data":{"version":"4.1@beta"}},{"name":"Переопределение ключей в сопоставленных типах","path":"Pereopredelenie_kluchei_v_sopostavlennyh_tipah","data":{"version":"4.1@beta"}},{"name":"Рекурсивные условные типы","path":"Rekursivnye_uslovnye_tipy","data":{"version":"4.1@beta"}},{"name":"paths без baseUrl","path":"paths_bez_baseUrl","data":{"version":"4.1@beta"}},{"name":"checkJs не требует активации allowJs","path":"checkJs_ne_trebuet_aktivacii_allowJs","data":{"version":"4.1@beta"}},{"name":"jsx фабрики для React 17","path":"jsx_fabriki_dlya_React_17","data":{"version":"4.1@beta"}},{"name":"Поддержка тега @see для JSDoc","path":"Podderjka_tega_@see_dlya_JSDoc","data":{"version":"4.1@beta"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] abstract больше не совместим с async","path":"[KRITIChESKOE_IZMENENIE]_abstract_bolshe_ne_sovmestim_s_async","data":{"version":"4.1@beta"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] any и unknown доминируют в ложных позициях","path":"[KRITIChESKOE_IZMENENIE]_any_i_unknown_dominiruut_v_lojnyh_poziciyah","data":{"version":"4.1@beta"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] --declaration и --outFile требуют имя корневого пакета","path":"[KRITIChESKOE_IZMENENIE]_--declaration_i_--outFile_trebuut_imya_kornevogo_paketa","data":{"version":"4.1@beta"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] параметры resolve теперь обязательные","path":"[KRITIChESKOE_IZMENENIE]_parametry_resolve_teper_obyazatelnye","data":{"version":"4.1@beta"}}]},{"name":"4.2","path":"4.2","sections":[{"name":"Изменение поведения указания остаточных типов в кортеже","path":"Izmenenie_povedeniya_ukazaniya_ostatochnyh_tipov_v_korteje","data":{"version":"4.2"}},{"name":"Изменение вывода для псевдонимов типов","path":"Izmenenie_vyvoda_dlya_psevdonimov_tipov","data":{"version":"4.2"}},{"name":"Ужесточение правил проверки для in-оператора","path":"Ujestochenie_pravil_proverki_dlya_in-operatora","data":{"version":"4.2"}},{"name":"Новый флаг --noPropertyAccessFromIndexSignature","path":"Novyi_flag_--noPropertyAccessFromIndexSignature","data":{"version":"4.2"}},{"name":"Модификатор abstract для описания типа конструктора","path":"Modifikator_abstract_dlya_opisaniya_tipa_konstruktora","data":{"version":"4.2"}},{"name":"Понимание структуры проекта с флагом --explainFiles","path":"Ponimanie_struktury_proekta_s_flagom_--explainFiles","data":{"version":"4.2"}},{"name":"Проверка вызова функций в логических выражениях","path":"Proverka_vyzova_funkcii_v_logicheskih_vyrajeniyah","data":{"version":"4.2"}},{"name":"Смягчение правил между необязательными членами и строковых индексных сигнатур","path":"Smyagchenie_pravil_mejdu_neobyazatelnymi_chlenami_i_strokovyh_indeksnyh_signatur","data":{"version":"4.2"}},{"name":"Деструктурированные переменные можно явно пометить как неиспользуемые","path":"Destrukturirovannye_peremennye_mojno_yavno_pometit_kak_neispolzuemye","data":{"version":"4.2"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Обновление lib.d.ts","path":"[KRITIChESKOE_IZMENENIE]_Obnovlenie_lib.d.ts","data":{"version":"4.2"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] noImplicitAny и новое поведение для оператора yield тип которого не может быть установлен явно","path":"[KRITIChESKOE_IZMENENIE]_noImplicitAny_i_novoe_povedenie_dlya_operatora_yield_tip_kotorogo_ne_mojet_byt_ustanovlen_yavno","data":{"version":"4.2"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Проверка вызова функций в условных операторах приурочена к флагу --strictNullChecks","path":"[KRITIChESKOE_IZMENENIE]_Proverka_vyzova_funkcii_v_uslovnyh_operatorah_priurochena_k_flagu_--strictNullChecks","data":{"version":"4.2"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Лимит для механизма spread в кортежах","path":"[KRITIChESKOE_IZMENENIE]_Limit_dlya_mehanizma_spread_v_kortejah","data":{"version":"4.2"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменение правил для оператора in","path":"[KRITIChESKOE_IZMENENIE]_Izmenenie_pravil_dlya_operatora_in","data":{"version":"4.2"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Расширение .d.ts теперь нельзя использовать в путях импорта","path":"[KRITIChESKOE_IZMENENIE]_Rasshirenie_.d.ts_teper_nelzya_ispolzovat_v_putyah_importa","data":{"version":"4.2"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменение типа параметра функции обратного вызова передаваемой в качестве аргумента функции visitNode","path":"[KRITIChESKOE_IZMENENIE]_Izmenenie_tipa_parametra_funkcii_obratnogo_vyzova_peredavaemoi_v_kachestve_argumenta_funkcii_visitNode","data":{"version":"4.2"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Отмена поведения литерального вывода шаблона из версии 4.2@beta","path":"[KRITIChESKOE_IZMENENIE]_Otmena_povedeniya_literalnogo_vyvoda_shablona_iz_versii_4.2@beta","data":{"version":"4.2"}}]},{"name":"4.3","path":"4.3","sections":[{"name":"Отдельные типы аксеcсоров","path":"Otdelnye_tipy_aksecsorov","data":{"version":"4.3@beta"}},{"name":"Модификатор override и флаг --noImplicitOverride","path":"Modifikator_override_i_flag_--noImplicitOverride","data":{"version":"4.3@beta"}},{"name":"Улучшение работы шаблонного строкового типа","path":"Uluchshenie_raboty_shablonnogo_strokovogo_tipa","data":{"version":"4.3@beta"}},{"name":"Изменение поведения для объекта Promise в условных выражениях","path":"Izmenenie_povedeniya_dlya_obekta_Promise_v_uslovnyh_vyrajeniyah","data":{"version":"4.3@beta"}},{"name":"Индексные сигнатуры класса","path":"Indeksnye_signatury_klassa","data":{"version":"4.3@beta"}},{"name":"Расширение возможностей ECMAScript приватного модификатора и флаг --useDefineForClassFields","path":"Rasshirenie_vozmojnostei_ECMAScript_privatnogo_modifikatora_i_flag_--useDefineForClassFields","data":{"version":"4.3@beta"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменения в lib.d.ts","path":"[KRITIChESKOE_IZMENENIE]_Izmeneniya_v_lib.d.ts","data":{"version":"4.3@beta"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Enum больше нельзя сравнивать с произвольными числами","path":"[KRITIChESKOE_IZMENENIE]_Enum_bolshe_nelzya_sravnivat_s_proizvolnymi_chislami","data":{"version":"4.3@beta"}}]}]}},"staticQueryHashes":["408059355","63159454"]}